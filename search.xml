<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2023-7-29</title>
    <url>/%E6%97%A5%E8%AE%B0/2023-07-29/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="05daf0d5924f26ce8b23e1755ea6cef862bc7d74ab85aeaf4c7f69ebb43e0531">cc4ec2bdcb70baedb557c05a5642b79fdba5ef3e53519dbeb0fd42e8ab04bd481796dc32b947e845b506caed4fde0a343fc14a41075253a60f9ce660658f7c12c656b54cae5d0e475b35a686910893a99bb4e3927bf8a91d25f5023499f2182f476c6f7e2e3be0be71f98a2528866ea5715f3866b42111bc63266e0dbdd9444dd59785cff22934644abb771968037ff75b40271c050c6653b25e176fde0054aee5615a125dd80758861ddc65671852f9850edf78d39714546afd3231cfbedc2ab8ebedf2e32ca8005b7153e4f92b0f585ad8fa4bdd792bbe68426aab9b757bb245829381fa169d403950a943443ee298ffaf057ce9a3f2c572f102d1ced9ab36197756830e94891788075e66306c3418c61f226ad1c75c3dc82e5753ace19460d07998868a6b89746bb585b4f117a481de258301a6cbe0ed3527bcde8e79641f436547b048c24a57aa7cbbdb5b795e5e91320007f1ae82bc75c156539a0b4c6a0e79acd93080a366c4dbf4a851665723d136fbd8ae2a214920320c999bf83efd789aafec29842970c12d6f9a7fbb72259c41b43db4ed877a0413878b6f937f9892abfbf22bd15b7ce3dfc16fb4650952edfa0715d72d790f94ebdddd12d4e6eaf3494903fd10ecf51cb7ce7cc5d5f2c2dee9c9a39ea9a0e0b80cb82b10962e459a9a3cd139197d330ecd0c8f792cf415a4daf585315a542021623afb105d9cfbadeef7fb96b0aced980ea97c9e628d4001348c6ceb70dd92f08b067f09f2c2f48d7cde0645180a9aff9b0a0674d588a5e7993f2c20d7e44bd785e043f4a03e8967c817793131b1ee7c2feedcb20a2c206943b011036d786cc427ab0e27ee54cc0cd7810b6e9effb23695274006420f7726eb7415e77e3793bf662049c8948eed6a5db48ac3dba303d83659c469b3f6424371ee3c5066500324b7a359cb4c3908117b3ab16e8365e593de86e4328c5abc4414ed91d485d3659c4bdba009fef2606e84b15da407ef5ba479fb0131b13ef6e7e258a623233401b0004bb2a7c84ddc7f88088e2f24349b1ab8b1ab90286335a6e9de1bc7f70685b18da7e299962552a2f8dd77e9240de068804fca713f6c46f66ceeb2f2cc77c1db0f7930bb2cb0a8faa1f4603e8ad2fe62c8dbbdb79f13f49c41b91805aa985f397adac1ce4afe03dcb534bd0e437bff769b51abf36c3c3c0af6f3c303d2c7988e89885d49c3bf31e2b95eb32d0fd44aea787a5f7769f277e240c82f7f76989381ca959950c9c434708451e65688845e3cb0d1fd4a306a09f14c7818a85af8be087526830e0d79a61c0da8d290e149c393c3d5e89b40ba3aa71561173cb0203bfb7de071bcaed35fa1727d2c91eff9645617b8da37477d5fa2a37e4301d0455662828620a007ec0470e44920fc9191b0fb06d265192c4d83a11db6abac158e5af4fef914ce9408d485ccc2e546062bea7f601b8a990ccf98b512d1df493b65d63bd447df89cbfd78239d544034c8bfbe6be8c5bb8483ceb2d5165bcaa91b5e5ea7c152a24c63771ecea42747acadb86547bbd50899b576afbf7e2533c836bf7c0385f577d8a66997eaf7ba08861ccfed29db3be22dad508633a23af85f39433c69de0736c0d5be68cd14b041506e4c7ce0e182c653f2c208</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>日常</category>
        <category>日记</category>
      </categories>
      <tags>
        <tag>日记</tag>
      </tags>
  </entry>
  <entry>
    <title>2023-8-12</title>
    <url>/%E6%97%A5%E8%AE%B0/2023-08-12/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="e273172c04159542c047b2755353ddca2d90815d1a9ec1185e1b346ff953c044">cc4ec2bdcb70baedb557c05a5642b79f5f8effe7abddfc8d8149b38ebae0bf56d17d45d7e64e17916fc18dd1cbc9eea2f86fa342e8ab74e0f59a70f12ad988cd90b7a0831739c4f7bf40ec8f2ab1e88c8001a3c7c3c5478acead7a19b35a0292d5e08323d2c36f219447a3b89b08dc071231b93719adb90f5c067ae1af692aa6077d8fc183a3742e4488f6178bfb38723767d1066960c5448d9708c4c90dddc1c66b92d27acb0978f8e0fed8d04a8f18f649607df039f844234514fd51aa15c2979ee2d13908b7005b78397d9522c8c2ffe04a4ebcc6dd3ce113a7d3ac16396559f58edaa36fd040bcb0c23f06ea196a4ca168bea1d9e7e4458dffa233163e2eed6609df441a946fe86d2a8d69d10ee46f125f201a2167379584e76cba94aea6ffb617254ff9ecc1c5d3ab78ce826e5f819162c80b7b2a3224b7485f1f9af9659d09d0c26cca3e9647126e7390ff5ee16dcf34409e88a3a243470c75314d9a759ff81a47d1a111d46e9ec8b8537f61462e046b2dcbb7637bc9cbc4a7c422dbabf1063182b305640f7de633777e0b6f14b81483c0ea8f13a86693d8267eb5cc789c54f7518d0a5977df663e825257191bb4499508f95c5c9c906f0e2e7c9116de802fed8007a361b8054522cbfa1f4ff239ffb3e9ad693dab4d5cd19225a1d20928757dc7c8c830c089050068253e49d4bd400329576fce8258001fa1504cc692f3a000d6ec534c2f25ecec9e8f656b40343426deb3c75be67e4717224fd7d0c80f53fa9c94eaf381a1d4a1fb3e20462dc60f136499587b8645ec5b7b55534eb719fe8e6393c5ac549fc2393e39c7b0bf71de955f1b261d0f12f794a92bae4948d0d8bc73ec6f5ec0625ec36e88d10b8b30077307bcad73b95f3bf4bc8ef13ba3ce075b2869b09dcec25d01828eee1a9d9d9baf9260514cb3a841bf0670fc7a5f4b3610171779a7dc2a1ae4a6b0128b678baa30d8a3794e480ccc8f6a8c11536c108cf34d2118a20f3bc0724b31646ecebd0b6152b65e08b0bcba5b20fc6ab28c5ada0677ff383766693d5617c81f83a29306adef2cc18f05fede0158a7a2d619db4923942c02c9f0bb4f88ecbdb9ffbfdcfcb2e89c60768b651e100943b9fa1f</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>日常</category>
        <category>日记</category>
      </categories>
      <tags>
        <tag>日记</tag>
      </tags>
  </entry>
  <entry>
    <title>2023-7-31</title>
    <url>/%E6%97%A5%E8%AE%B0/2023-07-31/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="c35be464b7c32ad42c8942c04140148dc13d93df91ae3d8175df11da2836d62d">cc4ec2bdcb70baedb557c05a5642b79f53a9fe53ec1d198b1cc99db7e8de9cbf87c5bc9b46408705c468f99ea0ed56d4cb97ed86a393ee34c47e75f5b34291a4469187628ca0b798cfbd1874443a87e01483612ca85ffbcb73f03553181c7fde5954f958cf5f010179a815b3d868c0f8da5efb8a885ce0fad5654ee0854de175e4eddb78d0aefb9b9cea99b6fe0e222fa64c77a2339b237255d9991a97152d7cc8e5075c099beea3c4b9de8faff69c51be92d324af356c3f4cedd72e406774d389ee45ce13aae85ca274b81b5c2c97f2a5fb5d46b681c950c48207983353578fbdcc4eef9cbb7259b13b9163d6250b69b4da1f003a9b7da1a116671a0f8574f61895713579fa604319b0c1f82af1a540dba14fe13318304d459bac6c7f5b8ef7fd496cce093dcd66cf524b98d6dee7166fea54853e88b89d3fc9efdd327379271d6e42b849f0b71b87206b8a6c6e8ced10c230455b9438a7ccc299e61835063238043d733c9f54f3d934685178e44661b5efe0fda282990b5b931fd0843b1cfaca986c9899e5c73ec049379c76e1282007963a89bb8271c3c3fc6c60e6e8a42be013d565286b40089aaafc34bfd31a37cf9be2aa1bba745a64cae34391d9be17b0b572b95921aeac44aeb7cfc6eb1633681b43cd6d6646b2c371371ce47d732af06bafed4972c4a1574d5dca522c870645b4b5394f01fd5804ca242ccb8fb58846103a3d2f36fd15b6317bd717ec0605f511eea8642eb0cf1e7afaa4b94c8458f24ba41b695e9992b055d69d6644f56bf248566870982db25c7a47eac0aa286cc6abfd1f538d02b18fdd2295b5dc9df8107c68562c6eb00cd5c69f03aeeac46cd4362307532f0a6865fffaeea08c09f04e803a7e7987476ccc121f63b8dc0b1b69d5cea0d34bc9f0cdd96c188972b8df88faafd217553e6e5ce8a73a24fabdd79f0b4389b4f31f234dde7fcd16076b11a05763aec3d660742bc569cd3c7a61f2158c3841e47ce0ff8bdf52b85405dcff9ae68d2641eb57d85ce6e2bd9aa9b612626847c11fb76e14775243adbe2d1572ac40baae6cdbb508c00919a3c6d3d9a6cb5f1ba33ab85b2b97e8ad766f38fe6322838acb3d0aa03777c1ed6766abe2b814a243b19fac03ad6121f16f8c4bc3e9b678ef53a68ac70296e8e39fdd66e2cd31a26ab29c7155330e124f7468435fa9f1f1054ced0f6287d70daa37f3d03ac1c1477d40dc1e36666d2a8f1a263decf0571e78564d9e1fbd2604e59c3e2a17b9</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>日常</category>
        <category>日记</category>
      </categories>
      <tags>
        <tag>日记</tag>
      </tags>
  </entry>
  <entry>
    <title>2023-8-16</title>
    <url>/%E6%97%A5%E8%AE%B0/2023-08-16/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="773c3fa3496b38703c5327f24a77c419fa2676b6a32d01735736a1ebdd9e312e">cc4ec2bdcb70baedb557c05a5642b79f9b9b30274bec043f4c322fb6c1644cc6f063fe49c410f30d86f28e6db8a4aa003e1c450ec270a0b4b7a5c5dfdce26bdd54c87b21e66eeff42debc210a1f4183bcd2a20cecf5d00269cc13287b8f04d73</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>日常</category>
        <category>日记</category>
      </categories>
      <tags>
        <tag>日记</tag>
      </tags>
  </entry>
  <entry>
    <title>2021年计算机专业最好的大学排名</title>
    <url>/2023-8/2021%E5%B9%B4%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E6%9C%80%E5%A5%BD%E7%9A%84%E5%A4%A7%E5%AD%A6%E6%8E%92%E5%90%8D/</url>
    <content><![CDATA[<blockquote>
<p>起码要考到B的学校</p>
</blockquote>
<span id="more"></span>

<h2 id="全国排名"><a href="#全国排名" class="headerlink" title="全国排名"></a>全国排名</h2><p>根据教育部发布的2019-2020年第四轮计算机科学与技术学科评估结果，当前计算机专业最新排名如下（此排名仅做参考）：</p>
<h3 id="一-评估结果为A-的学校"><a href="#一-评估结果为A-的学校" class="headerlink" title="一.评估结果为A+的学校"></a>一.评估结果为A+的学校</h3><p>北京大学、清华大学、浙江大学、国防科技大学</p>
<h3 id="二-评估结果为A的学校"><a href="#二-评估结果为A的学校" class="headerlink" title="二.评估结果为A的学校"></a>二.评估结果为A的学校</h3><p>北京航空航天大学、北京邮电大学、哈尔滨工业大学、上海交通大学、南京大学、华中科技大学、电子科技大学。</p>
<h3 id="三-评估结果为A-的学校"><a href="#三-评估结果为A-的学校" class="headerlink" title="三.评估结果为A-的学校"></a>三.评估结果为A-的学校</h3><p>北京交通大学、北京理工大学、东北大学、吉林大学、同济大学、中国科学技术大学、武汉大学、中南大学、西安交通大学、西北工业大学、西安电子科技大学、解放军信息工程大学。</p>
<h3 id="四-评估结果为B-的学校"><a href="#四-评估结果为B-的学校" class="headerlink" title="四.评估结果为B+的学校"></a>四.评估结果为B+的学校</h3><p>中国人民大学、北京工业大学、北京科技大学、南开大学、天津大学、大连理工大学、哈尔滨工程大学、复旦大学、华东师范大学、东南大学、南京航空航天大学、南京理工大学、杭州电子科技大学、合肥工业大学、厦门大学、山东大学、湖南大学、中山大学、华南理工大学、四川大学、重庆大学、西南交通大学、重庆邮电大学、解放军理工大学</p>
<h3 id="五-评估结果为B的学校"><a href="#五-评估结果为B的学校" class="headerlink" title="五.评估结果为B的学校"></a>五.评估结果为B的学校</h3><p>北京师范大学、天津理工大学、山西大学、大连海事大学、长春理工大学、哈尔滨理工大学、燕山大学、华东理工大学、上海大学、苏州大学、中国矿业大学、河海大学、江苏大学、南京信息工程大学、浙江工业大学、安徽大学、中国海洋大学、中国地质大学、武汉理工大学、暨南大学、深圳大学、西南大学、兰州大学、火箭军工程大学</p>
<h3 id="六-评估结果为B-的学校"><a href="#六-评估结果为B-的学校" class="headerlink" title="六.评估结果为B-的学校"></a>六.评估结果为B-的学校</h3><p>北方工业大学、中国农业大学、首都师范大学、天津工业大学、华北电力大学、太原理工大学、内蒙古大学、沈阳航空航天大学、东华大学、南京邮电大学、江南大学、浙江工商大学、福州大学、山东科技大学、济南大学、华中师范大学、广西大学、桂林电子科技大学、云南大学、西北大学、青海师范大学、新疆大学、中国石油大学、空军工程大学</p>
<h3 id="七-评估结果为C-的学校"><a href="#七-评估结果为C-的学校" class="headerlink" title="七.评估结果为C+的学校"></a>七.评估结果为C+的学校</h3><p>河北工业大学、沈阳建筑大学、辽宁师范大学、上海理工大学、上海海洋大学、常州大学、浙江理工大学、浙江师范大学、温州大学、福建师范大学、南昌大学、郑州大学、武汉科技大学、湖南科技大学、广西师范大学、成都信息工程大学、贵州大学、昆明理工大学、长安大学、青岛大学、西安邮电大学、北京化工大学、北京语言大学、中国传媒大学、中国民航大学、河北大学</p>
<h3 id="八-评估结果为C的学校"><a href="#八-评估结果为C的学校" class="headerlink" title="八.评估结果为C的学校"></a>八.评估结果为C的学校</h3><p>北京工商大学、河北工程大学、石家庄铁道大学、中北大学、东北电力大学、长春工业大学、上海师范大学、安徽工业大学、江西师范大学、山东财经大学、河南理工大学、郑州轻工业学院、湘潭大学、华南农业大学、西安理工大学、西安工业大学、西北农林科技大学、三峡大学、扬州大学、大连大学、广东工业大学</p>
<h3 id="九-评估结果为C-的学校"><a href="#九-评估结果为C-的学校" class="headerlink" title="九.评估结果为C-的学校"></a>九.评估结果为C-的学校</h3><p>中央民族大学、沈阳理工大学、黑龙江大学、上海海事大学、江苏科技大学、华侨大学、东华理工大学、江西理工大学、江西财经大学、河南工业大学、河南大学、河南师范大学、武汉工程大学、武汉纺织大学、湖北工业大学、长沙理工大学、海南大学、桂林理工大学、西南石油大学、重庆交通大学、西华大学、西南财经大学、西安石油大学、北京信息科技大学、湖南工业大学、海军航空工程学院</p>
<h2 id="广东省排名"><a href="#广东省排名" class="headerlink" title="广东省排名"></a>广东省排名</h2><h3 id="第一梯队：630-分"><a href="#第一梯队：630-分" class="headerlink" title="第一梯队：630+分"></a>第一梯队：630+分</h3><p><strong>中山大学</strong> 与 <strong>华南理工大学</strong></p>
<h3 id="第二梯队：610-630分"><a href="#第二梯队：610-630分" class="headerlink" title="第二梯队：610-630分"></a>第二梯队：610-630分</h3><p><strong>深圳大学</strong> 和 <strong>暨南大学</strong></p>
<h3 id="第三梯队：580-590分"><a href="#第三梯队：580-590分" class="headerlink" title="第三梯队：580-590分"></a>第三梯队：580-590分</h3><p><strong>华南农业大学</strong> 和 <strong>广东工业大学</strong></p>
<h3 id="第四梯队：500-580分"><a href="#第四梯队：500-580分" class="headerlink" title="第四梯队：500-580分"></a>第四梯队：500-580分</h3><p>深圳技术大学、广州大学、韶关学院和东莞理工学院。</p>
]]></content>
      <categories>
        <category>日常</category>
        <category>信息</category>
      </categories>
      <tags>
        <tag>大学</tag>
        <tag>隐藏</tag>
      </tags>
  </entry>
  <entry>
    <title>一些好用的Hexo插件</title>
    <url>/2023-8/%E4%B8%80%E4%BA%9B%E5%A5%BD%E7%94%A8%E7%9A%84Hexo%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<blockquote>
<p>本人用过比较好用的插件会放在这里</p>
</blockquote>
<span id="more"></span>

<h2 id="文章折叠"><a href="#文章折叠" class="headerlink" title="文章折叠"></a>文章折叠</h2><blockquote>
<p><a href="https://blog.baiyz.top/posts/1b7086c4/">https://blog.baiyz.top/posts/1b7086c4/</a></p>
</blockquote>
<h3 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h3><blockquote>
<p>官方：<a href="https://github.com/chekun/hexo-excerpt">chekun&#x2F;hexo-excerpt: Automatic excerpt generator for Hexo (github.com)</a> -&gt;文章自动概述</p>
</blockquote>
<ol>
<li>安装Npm包：</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-excerpt --save</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>在主题配置目录themes\next_config.yml下增加：</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">excerpt:</span></span><br><span class="line">  <span class="attr">depth:</span> <span class="number">5</span> <span class="comment"># 截取深度</span></span><br><span class="line">  <span class="attr">excerpt_excludes:</span> [] <span class="comment"># 生成的摘录中排除某些标签不进行截取</span></span><br><span class="line">  <span class="attr">more_excludes:</span> [] <span class="comment"># 排除其他更多的</span></span><br><span class="line">  <span class="attr">hideWholePostExcerpts:</span> <span class="literal">true</span> <span class="comment"># 全部文章隐藏全文进行截取</span></span><br></pre></td></tr></table></figure>

<h3 id="运行效果"><a href="#运行效果" class="headerlink" title="运行效果"></a>运行效果</h3><p><img src="/../../images/2981adde9831689d306e2e8d34cc2980379ec933ed6a168066dce7b35256357d.png" alt="图 0">  </p>
]]></content>
      <categories>
        <category>学习</category>
        <category>网络</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>网络</tag>
        <tag>网站</tag>
        <tag>未完成</tag>
      </tags>
  </entry>
  <entry>
    <title>《如何成为不完美主义者》读书笔记</title>
    <url>/2023-8/%E5%A6%82%E4%BD%95%E6%88%90%E4%B8%BA%E4%B8%8D%E5%AE%8C%E7%BE%8E%E4%B8%BB%E4%B9%89%E8%80%85%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<blockquote>
<p>在解决完美主义的道路上也不必追求完美</p>
</blockquote>
<span id="more"></span>

<blockquote>
<p>以下内容均通过 “检视阅读” 获取</p>
</blockquote>
<h2 id="1-不完美主义者的特征"><a href="#1-不完美主义者的特征" class="headerlink" title="1. 不完美主义者的特征"></a>1. 不完美主义者的特征</h2><p>作者从过高期待, 纠结部分, 认同需求, 过失担忧和行动顾虑这五点分析了完美主义者和不完美主义者之间的区别:</p>
<ol>
<li>不那么在意结果, 更在意过程</li>
<li>不那么在意问题本身, 更在意在有问题存在的情况下取得进展. 如果有问题必须解决, 那就关注解决问题的方法</li>
<li>不那么在意别人的看法, 更在于自己想成为什么样的人, 成就什么样的事</li>
<li>不那么在意行动正确与否, 更在意是否行动</li>
<li>不那么在意失败, 更关注成功</li>
<li>不那么在意所谓时机, 更在意任务本身</li>
</ol>
<p>一句话总结: <strong>不要那么在意条件和结果, 要更在意眼前如何实现自己的目标, 积极去做</strong></p>
<h2 id="2-如何让自己获得”不完美”的能力"><a href="#2-如何让自己获得”不完美”的能力" class="headerlink" title="2. 如何让自己获得”不完美”的能力"></a>2. 如何让自己获得”不完美”的能力</h2><h3 id="“二进制法则”"><a href="#“二进制法则”" class="headerlink" title="“二进制法则”"></a>“二进制法则”</h3><h4 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h4><p>我们可以把运动这件事情轻松转化为数字任务: 只要你做了就是1, 只要没做就是0</p>
<h4 id="为什么"><a href="#为什么" class="headerlink" title="为什么"></a>为什么</h4><p>当完美主义者想做一件事的时候, 往往会考虑的因素过多, 导致还没有准备好就放弃了. 而二进制法则就不给我们这个机会, 它告诉我们:</p>
<p><strong>开始做, 最重要</strong></p>
<h4 id="怎么做"><a href="#怎么做" class="headerlink" title="怎么做"></a>怎么做</h4><p>如写作业, 将写作业转化为数字任务, 写了就是1, 没写就0, 立刻去做它</p>
<h2 id="3-如何反思"><a href="#3-如何反思" class="headerlink" title="3. 如何反思"></a>3. 如何反思</h2><p>每天早上或者晚上, 躺在床上思考:</p>
<ol>
<li>做这件事有什么好处</li>
<li>哪些地方可能不够完美</li>
<li>如果不完美地完成了的结果是什么</li>
</ol>
<p>这样一来就减少了两个步骤, 同时会让自己反思, 我们会发现其实完美与不完美其实结果差别不大, 但是投入的成本却差别很大</p>
<p><strong>完美并不重要, 重要的是把事情做完</strong></p>
]]></content>
      <categories>
        <category>日常</category>
        <category>读书</category>
      </categories>
      <tags>
        <tag>读书</tag>
        <tag>完美主义</tag>
      </tags>
  </entry>
  <entry>
    <title>关于我暑假要干什么</title>
    <url>/%E6%97%A5%E8%AE%B0/%E6%9A%91%E5%81%87%E8%A6%81%E5%B9%B2%E4%BB%80%E4%B9%88%EF%BC%88%E5%9F%BA%E6%9C%AC%E5%BA%9F%E9%99%A4%EF%BC%89/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="4f3e0b50aa11754f9e2fea99620c4da13a0d9a758a87a5a48e61b20f1d06910c">cc4ec2bdcb70baedb557c05a5642b79f5f8effe7abddfc8d8149b38ebae0bf56a58f6418b066019e624db0d8cc141658442273024ebb7b7b344c993f89be45467e3a5f5d3c7d1f6ecf1657e5a2240c49c49d7465f2501b3207e096de736d6d2c49eaa92a66ef3adf43ad036e24dec3d535d02ee0dee00f64b40700d784528616e1a047ab210eac644a369530c4211d460a58ba3c2a07a82a2a2b1e9c0dec98a93f040ec8ec7b1ee5f9ce8cf2f695351af60475b261e540a6148c8c77bba3ef78db9689a12035c926666eea017021c272b0309a899468eff2f1881d6bd83cc309106f5576cfe39442648871cb03ea33a85f181d850e7869c5279eda7430ad8003c90822c7582875c7a437f6bd213ab96d833c20dad72a9a4b8d5013fc583f0fa533df3ed1315d0c8b61dfdabd90ed164f0cb9304efac6a8a98b8340f8fb9d675e8bff262ae199b9c000013fb0a653751cd4eb3b4d85ffe3cfdd7616ae4be445eb5adc699953ba53665a0a47f36f67c3bfa1b3448eb25ff43ab151b59b0c58409d1424ea118d8159f5acb096f7c8fba33a87cff4b82ebd8af05a8c264ebc249ddc933551b775646696ef4d7cf45afa314fd9050cf46a2c50cc7471279c0fac233d91d9dea6d5bb85355314888ea04dea9f9cac2c1d3a2b8f325455148e7aa993b0a4a44346bef88e74e2b690aca53a7eb51060aa76104ed801f7bb53600c007fb6c35e4312d44c11e4380cf9873bf43c362e7fa876459ab713288433e85f565bb693513a8cba5b6af9ac153f68062b4d40d94b99bdbb9d3e23463ab3d0619df00fb9b1a2db8964b0146ceee426535fe4434e348bf62f358842e6f024a35009ff0158f0a7a43c869f1149594710facb2d21c60cfe04a8213d4a942334e7414c4b471dea149e03b6cad7bcca87c06cad6744d2810d3b7e1217b5db036affe3648724f815cb707cd37df698e2ff8990f15087ac40fe955b1167f9ee7d87eb6b318dd146bf0ac7bf72de0b0b36ba390c99d35d96df5417bef9cb3a23f30a4d1adf3849b425e3a84294551c5961817b19069fe62f5547ceae680acb9310da732e5e02870d1721265a20cd579748fab7b01128b9f7477d24cbab79692d600b9da3c8f0f2031a1fa3ae1a6657aaa2c78d491749e2b0afd0862bcee72bb7df7ccc781ea66798b421dffbe9816a245b1db678c3abbcb6616cc339b5b3e615a60fef07f710c2d6e26b40ecec817e56c40d5c19da9874895c03833d529075bf951a502e8f4ac9ffaaff23b632d1525246d7b7cd3f788a70bb93921dd4b1d21134b10c04b3549b2fded2eb90350e73a35bbef84d289b7093a3ecfdb8dcee789c3d93567f0d544ece217c3ab91c862a64638a2ca75173ea7a5220469960b4cccfa5557c32875e962549caec2bd729e2953ea4623becf816b59942788d9ec39537932959c52b67910883d5d00b28022e407e54a1d7e6f34f9b17ad4297b9931859e8145d44cdc27fd1b0e07bf1c797b7fcd308b591c4c6402dded1b6bf46e88b2fa9dc003afb0a1adb523618aea50657b362cb31e641bb9fab2db65ad33aa61dab73c2f7bb4204268efbdc6cb4a99d449aa14e5a7cf0a81bd6a9cc0002a1cb310e56dee36de51ec9356d411bb52621780ec90be9b87b20320c0523d789cf99fb227304e4658fff16545a0414fe3857f90b505c0c8a617e08b26d9c7e75c8b4998f69c9523dd944c2a1a22cae3f9385518c7306adb21c68ef4fa214f2e35be36041d022ade93cad82155e49d198fd48da658cb5f55f621cab67a125fe944860d1de8c0b794eb51892145d6ad014cef50bfb1d3b13821973b04d16966b60b02ef2be809e48d87b17c841c8fcafd4040ad4d2ccae0d0564c84aef6db4c5e814dc968be234df34ffeae7d26e2726d6143aa4d793275b6fe611eb48e923976802f839becbf9a17369729120e5278419b0ba7dc4dc809097e96eb4fe48d436480512487a4f85993a435623ff657cf7ebdf730e0183a79caf27e157db044566d5772e5aa2c2653ede2555a76791dfc67b90ebbbd7e2575044b9e59ac99d04bd86d821bb50c1d1acf931f2f1ce3a28872ac64d92b3aed20d5358a6ffb42cc0529c6d0b1ec3145d462485b89472798297615619145b391bc643b89d7f63c279e2c4e5072dce96e0f1d5f9878033728bfc68faab2f9081cb1a06936b1ca325ea9f25fffbdb3c0ca7e0574ce024eaffe290166ddd575b6fed9a835212b32944176cf4a7846b6a7a4cb4d349d6713657e3ca2c35425941836c099a09c90cc7363e46dae7bc72e425c67f5fd8d39f5933b7854893f5f296513e663839575a04976040d3064372488bba2bdabd5fe679bccc868770791467ab7c152a55cae35cceb342d9a43853d22ca6ff8bef8a6b58d8a7a0a9b094c13f3526fd90f2fc4cc3c723e21df3c1aaa578ce4244aeb9f489e29650c9519f4df74b51e29c10bbc76704cbd0ae7c3e73480ff7bf9d844de1c7bc29e94a3a5c7591c9eb7b88352ea5a9ab2b0c7a1aa9c4153f868056b32158fe689ab2d2fdd84ac128c4b8d57f566bfc8e078937b2040524eecfba5a2a35e244db284d382d09b67bccaf27f8a2a6b0b7da3181864911cad145a877b846a207c76216b336dc0f78782c59617947052e8da8e6545d9de2566982c998faef30375f7820de8251f03d53ccb839bb22a09a6b1a60bbcb021cc0d0a08892f46a0102cb678b5f79157009c040328b0801269f54efff7e2ce2f58fd1f2a578a6b5f41f9fb966d4eafd3d60381656b07614c2ef756a365c0e759425e52038bba94f1e278a86588ce031e5cd081a677c10637f72a67914c44021846ee934d197e8a65b896e093628114bd4c6bc98b6d4f33d026c22dd098be2215b7c16262c5fda776377eaa755a889f7fa9cf4181636b04c64b62ba6ccf1b9adfbf2d8ed4ff3cf3f5432b08a0aef03eadaad9ac001bfe596a7ca484493de480172b075a137e8a9ba8f913ef4ece7964a66196800fd58ceea1ab3d1eb447ff76713bad50331895a0515d8761ec2fbc298c306ba65952eba1632587b60bacb7f3f0c392c4fc224991aa06c660c4e07df658a7f4e55d9f889c6b59176cf6f29a4251a8530842191afb092c7580dc840049061b7564cf69c948b5719e11873be7c25a79b11f3ed002f0604159d5b12781dd0fb14cbbbc0537c52630828933244bc1c0db7efb385da18be57b63ae8e13444b46325000a08af287a6428ceab869da73d78198865cf0e9185cd18c75620b6389f038e2092fde054ae35262c0599368218b5163a45715104c01fed81cb839e7929859cd2b219dd4bc0773019fad7f38707d0a8d1259c5aa1259283848b62062394b562721d20a8c6becf12f3de3486d9887a84cd25a86b563104acff3ccbef0eec696c761570c0ffd6e56748005320a329819092143121f34b35007a96d859d4dd93846126af6b53d8db3b73ba8cca1f1bba7d1685dfa55f6eb49feabb096542a25f2b4ffc45d58f4f50fd31d642e794477b0af53043687fd8bf36643ebc65afb8ea5139f3fe1e99287b6808eed3e0b9f0c051a01250e7019156deaa5ccca82112c77c84dc60e409a12b9d78bfd9252ff0c49676a08331086f585442162b82ee36edb87536392a85f5f9fa96259bfdf8f28dffb460a316c548f8ac5bfdee9ecac27e986a1dc0ac19e9e32c3f342b5f2d359a1ff4a308dd13a25e5bb4c0ef781d25b16e7881c3e4cba7cbc9ee2af47b8b4c3c988eef6328f5d41ce2fc16b2ff71df6a217db9976b7bf5a9984b4e41b244aac0e07cf955fc8643cd78139eff19a5adcafc6b53531c0dbfddaba3c7e9cbbc87d77b30fdfa299ed24f9ea8fb59fa17a7a3815da3b3756a3ff032950a83083285864dae3fb6152cd3a4f4dae241ceb245690021dd2db01247ad777226c2244dfbf4538fcb75c37e96571c77c3225e5fdb4c0a57d4be4cfa646b60fccfd68462b14f573dcbec02a4a16656</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>日常</category>
        <category>日记</category>
      </categories>
      <tags>
        <tag>日记</tag>
      </tags>
  </entry>
  <entry>
    <title>如何解决完美主义</title>
    <url>/2023-8/%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E5%AE%8C%E7%BE%8E%E4%B8%BB%E4%B9%89/</url>
    <content><![CDATA[<blockquote>
<p>完美主义的核心：害怕失败。对于普通人来说，完美主义会大大降低效率，是一个困扰我多年的问题，那么，如何解决呢？</p>
</blockquote>
<span id="more"></span>

<blockquote>
<p>本文依然参考《完美主义扼杀效率》这本书，对不必要的内容进行了精简</p>
</blockquote>
<h3 id="一-短时高效地完成工作"><a href="#一-短时高效地完成工作" class="headerlink" title="一. 短时高效地完成工作"></a>一. 短时高效地完成工作</h3><ol>
<li>限制工作时间，特意设置一个比平常更短的时间，在有限的时间里集中注意力</li>
<li>从简单的、风险低的工作做起，循序渐进</li>
<li>工作时专注一点，集中于当前的一部分，而不是想着整体</li>
<li>对于一些日常琐事，想办法省力完成</li>
<li>利用好自己的零碎时间（如坐车时间），看是否能完成一些工作相关的内容</li>
<li>学会拆解任务，想婴儿一样迈出第一步</li>
</ol>
]]></content>
      <categories>
        <category>日常</category>
        <category>方法论</category>
      </categories>
      <tags>
        <tag>隐藏</tag>
      </tags>
  </entry>
  <entry>
    <title>解决拖延症最简单有效的方法</title>
    <url>/2023-8/%E8%A7%A3%E5%86%B3%E6%8B%96%E5%BB%B6%E7%97%87%E6%9C%80%E7%AE%80%E5%8D%95%E6%9C%89%E6%95%88%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<blockquote>
<p>听过很多次这个方法，实测也确实很好用</p>
</blockquote>
<span id="more"></span>

<blockquote>
<p>以下内容来自<strong>ChatGPT3.5</strong>的回答</p>
</blockquote>
<p>解决拖延症最简单有效的方法是使用「5秒法」，这是由梅尔·罗宾斯（Mel Robbins）提出的一种策略。以下是使用「5秒法」克服拖延症的步骤：</p>
<ol>
<li><p><strong>意识到拖延：当你意识到自己正在拖延时，停下来，不要让自己继续陷入拖延的行为。</strong></p>
</li>
<li><p><strong>倒数计时：在意识到拖延后，迅速从5开始倒数，「5、4、3、2、1」。</strong></p>
</li>
<li><p><strong>行动起来：当你倒数到1时，立即行动起来，不给自己任何借口或理由继续拖延。</strong></p>
</li>
</ol>
<p>这个方法的关键在于在倒数计时的过程中，你的大脑会转移到行动模式，从而打破了拖延的循环。它帮助你克服内心的犹豫和拖延，并促使你采取行动。</p>
<p>「5秒法」是一种简单而直接的策略，可以在各种情况下使用，无论是开始一个任务、做出重要决定还是进行任何需要克服拖延的事情。它可以帮助你战胜拖延症，培养积极主动的行为习惯。</p>
]]></content>
      <categories>
        <category>日常</category>
        <category>方法论</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>AI</tag>
        <tag>ChatGPT</tag>
        <tag>拖延症</tag>
        <tag>方法论</tag>
      </tags>
  </entry>
  <entry>
    <title>第四次学科评估计算机科学与技术（2021年）排名表格</title>
    <url>/2023-8/%E7%AC%AC%E5%9B%9B%E6%AC%A1%E5%AD%A6%E7%A7%91%E8%AF%84%E4%BC%B0%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B8%8E%E6%8A%80%E6%9C%AF%EF%BC%882021%E5%B9%B4%EF%BC%89%E6%8E%92%E5%90%8D%E8%A1%A8%E6%A0%BC/</url>
    <content><![CDATA[<blockquote>
<p>起码要考到B的学校</p>
</blockquote>
<span id="more"></span>

<table>
<thead>
<tr>
<th>序号</th>
<th>学校名称</th>
<th>评估结果</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>10001   北京大学</td>
<td>A+</td>
</tr>
<tr>
<td>2</td>
<td>10003   清华大学</td>
<td>A+</td>
</tr>
<tr>
<td>3</td>
<td>10335   浙江大学</td>
<td>A+</td>
</tr>
<tr>
<td>4</td>
<td>91002   国防科技大学</td>
<td>A+</td>
</tr>
<tr>
<td>5</td>
<td>10006   北京航空航天大学</td>
<td>A</td>
</tr>
<tr>
<td>6</td>
<td>10013   北京邮电大学</td>
<td>A</td>
</tr>
<tr>
<td>7</td>
<td>10213   哈尔滨工业大学</td>
<td>A</td>
</tr>
<tr>
<td>8</td>
<td>10248   <a href="https://www.dxsbb.com/news/list_116.html">上海</a>交通大学</td>
<td>A</td>
</tr>
<tr>
<td>9</td>
<td>10284   南京大学</td>
<td>A</td>
</tr>
<tr>
<td>10</td>
<td>10487   华中科技大学</td>
<td>A</td>
</tr>
<tr>
<td>11</td>
<td>10614   电子科技大学</td>
<td>A</td>
</tr>
<tr>
<td>12</td>
<td>10004   北京交通大学</td>
<td>A-</td>
</tr>
<tr>
<td>13</td>
<td>10007   北京<a href="https://www.dxsbb.com/news/list_200.html">理工</a>大学</td>
<td>A-</td>
</tr>
<tr>
<td>14</td>
<td>10145   东北大学</td>
<td>A-</td>
</tr>
<tr>
<td>15</td>
<td>10183   <a href="https://www.dxsbb.com/news/list_119.html">吉林</a>大学</td>
<td>A-</td>
</tr>
<tr>
<td>16</td>
<td>10247   同济大学</td>
<td>A-</td>
</tr>
<tr>
<td>17</td>
<td>10358   中国科学技术大学</td>
<td>A-</td>
</tr>
<tr>
<td>18</td>
<td>10486   武汉大学</td>
<td>A-</td>
</tr>
<tr>
<td>19</td>
<td>10533   中南大学</td>
<td>A-</td>
</tr>
<tr>
<td>20</td>
<td>10698   西安交通大学</td>
<td>A-</td>
</tr>
<tr>
<td>21</td>
<td>10699   西北工业大学</td>
<td>A-</td>
</tr>
<tr>
<td>22</td>
<td>10701   西安电子科技大学</td>
<td>A-</td>
</tr>
<tr>
<td>23</td>
<td>91037   解放军信息工程大学</td>
<td>A-</td>
</tr>
<tr>
<td>24</td>
<td>10002   中国人民大学</td>
<td>B+</td>
</tr>
<tr>
<td>25</td>
<td>10005   北京工业大学</td>
<td>B+</td>
</tr>
<tr>
<td>26</td>
<td>10008   北京科技大学</td>
<td>B+</td>
</tr>
<tr>
<td>27</td>
<td>10055   南开大学</td>
<td>B+</td>
</tr>
<tr>
<td>28</td>
<td>10056   <a href="https://www.dxsbb.com/news/list_120.html">天津</a>大学</td>
<td>B+</td>
</tr>
<tr>
<td>29</td>
<td>10141   大连理工大学</td>
<td>B+</td>
</tr>
<tr>
<td>30</td>
<td>10217   哈尔滨工程大学</td>
<td>B+</td>
</tr>
<tr>
<td>31</td>
<td>10246   复旦大学</td>
<td>B+</td>
</tr>
<tr>
<td>32</td>
<td>10269   华东<a href="https://www.dxsbb.com/news/list_196.html">师范</a>大学</td>
<td>B+</td>
</tr>
<tr>
<td>33</td>
<td>10286   东南大学</td>
<td>B+</td>
</tr>
<tr>
<td>34</td>
<td>10287   南京航空航天大学</td>
<td>B+</td>
</tr>
<tr>
<td>35</td>
<td>10288   南京理工大学</td>
<td>B+</td>
</tr>
<tr>
<td>36</td>
<td>10336   杭州电子科技大学</td>
<td>B+</td>
</tr>
<tr>
<td>37</td>
<td>10359   合肥工业大学</td>
<td>B+</td>
</tr>
<tr>
<td>38</td>
<td>10384   厦门大学</td>
<td>B+</td>
</tr>
<tr>
<td>39</td>
<td>10422   <a href="https://www.dxsbb.com/news/list_100.html">山东</a>大学</td>
<td>B+</td>
</tr>
<tr>
<td>40</td>
<td>10532   <a href="https://www.dxsbb.com/news/list_104.html">湖南</a>大学</td>
<td>B+</td>
</tr>
<tr>
<td>41</td>
<td>10558   中山大学</td>
<td>B+</td>
</tr>
<tr>
<td>42</td>
<td>10561   华南理工大学</td>
<td>B+</td>
</tr>
<tr>
<td>43</td>
<td>10610   <a href="https://www.dxsbb.com/news/list_109.html">四川</a>大学</td>
<td>B+</td>
</tr>
<tr>
<td>44</td>
<td>10611   <a href="https://www.dxsbb.com/news/list_117.html">重庆</a>大学</td>
<td>B+</td>
</tr>
<tr>
<td>45</td>
<td>10613   西南交通大学</td>
<td>B+</td>
</tr>
<tr>
<td>46</td>
<td>10617   重庆邮电大学</td>
<td>B+</td>
</tr>
<tr>
<td>47</td>
<td>91004   陆军工程大学（原解放军理工大学）</td>
<td>B+</td>
</tr>
<tr>
<td>48</td>
<td>10027   北京师范大学</td>
<td>B</td>
</tr>
<tr>
<td>49</td>
<td>10060   天津理工大学</td>
<td>B</td>
</tr>
<tr>
<td>50</td>
<td>10108   <a href="https://www.dxsbb.com/news/list_114.html">山西</a>大学</td>
<td>B</td>
</tr>
<tr>
<td>51</td>
<td>10151   大连海事大学</td>
<td>B</td>
</tr>
<tr>
<td>52</td>
<td>10186   长春理工大学</td>
<td>B</td>
</tr>
<tr>
<td>53</td>
<td>10214   哈尔滨理工大学</td>
<td>B</td>
</tr>
<tr>
<td>54</td>
<td>10216   燕山大学</td>
<td>B</td>
</tr>
<tr>
<td>55</td>
<td>10251   华东理工大学</td>
<td>B</td>
</tr>
<tr>
<td>56</td>
<td>10280   上海大学</td>
<td>B</td>
</tr>
<tr>
<td>57</td>
<td>10285   苏州大学</td>
<td>B</td>
</tr>
<tr>
<td>58</td>
<td>10290   中国矿业大学</td>
<td>B</td>
</tr>
<tr>
<td>59</td>
<td>10294   河海大学</td>
<td>B</td>
</tr>
<tr>
<td>60</td>
<td>10299   <a href="https://www.dxsbb.com/news/list_99.html">江苏</a>大学</td>
<td>B</td>
</tr>
<tr>
<td>61</td>
<td>10300   南京信息工程大学</td>
<td>B</td>
</tr>
<tr>
<td>62</td>
<td>10337   浙江工业大学</td>
<td>B</td>
</tr>
<tr>
<td>63</td>
<td>10357   <a href="https://www.dxsbb.com/news/list_106.html">安徽</a>大学</td>
<td>B</td>
</tr>
<tr>
<td>64</td>
<td>10423   中国海洋大学</td>
<td>B</td>
</tr>
<tr>
<td>65</td>
<td>10491   中国地质大学</td>
<td>B</td>
</tr>
<tr>
<td>66</td>
<td>10497   武汉理工大学</td>
<td>B</td>
</tr>
<tr>
<td>67</td>
<td>10559   暨南大学</td>
<td>B</td>
</tr>
<tr>
<td>68</td>
<td>10590   深圳大学</td>
<td>B</td>
</tr>
<tr>
<td>69</td>
<td>10635   西南大学</td>
<td>B</td>
</tr>
<tr>
<td>70</td>
<td>10730   兰州大学</td>
<td>B</td>
</tr>
<tr>
<td>71</td>
<td>90059   火箭军工程大学</td>
<td>B</td>
</tr>
<tr>
<td>72</td>
<td>10009   北方工业大学</td>
<td>B-</td>
</tr>
<tr>
<td>73</td>
<td>10019   中国农业大学</td>
<td>B-</td>
</tr>
<tr>
<td>74</td>
<td>10028   首都师范大学</td>
<td>B-</td>
</tr>
<tr>
<td>75</td>
<td>10058   天津工业大学</td>
<td>B-</td>
</tr>
<tr>
<td>76</td>
<td>10079   华北电力大学</td>
<td>B-</td>
</tr>
<tr>
<td>77</td>
<td>10112   太原理工大学</td>
<td>B-</td>
</tr>
<tr>
<td>78</td>
<td>10126   <a href="https://www.dxsbb.com/news/list_122.html">内蒙古</a>大学</td>
<td>B-</td>
</tr>
<tr>
<td>79</td>
<td>10143   沈阳航空航天大学</td>
<td>B-</td>
</tr>
<tr>
<td>80</td>
<td>10255   东华大学</td>
<td>B-</td>
</tr>
<tr>
<td>81</td>
<td>10293   南京邮电大学</td>
<td>B-</td>
</tr>
<tr>
<td>82</td>
<td>10295   江南大学</td>
<td>B-</td>
</tr>
<tr>
<td>83</td>
<td>10353   浙江工商大学</td>
<td>B-</td>
</tr>
<tr>
<td>84</td>
<td>10386   福州大学</td>
<td>B-</td>
</tr>
<tr>
<td>85</td>
<td>10424   山东科技大学</td>
<td>B-</td>
</tr>
<tr>
<td>86</td>
<td>10427   济南大学</td>
<td>B-</td>
</tr>
<tr>
<td>87</td>
<td>10511   华中师范大学</td>
<td>B-</td>
</tr>
<tr>
<td>88</td>
<td>10593   <a href="https://www.dxsbb.com/news/list_115.html">广西</a>大学</td>
<td>B-</td>
</tr>
<tr>
<td>89</td>
<td>10595   桂林电子科技大学</td>
<td>B-</td>
</tr>
<tr>
<td>90</td>
<td>10673   <a href="https://www.dxsbb.com/news/list_118.html">云南</a>大学</td>
<td>B-</td>
</tr>
<tr>
<td>91</td>
<td>10697   西北大学</td>
<td>B-</td>
</tr>
<tr>
<td>92</td>
<td>10746   <a href="https://www.dxsbb.com/news/list_127.html">青海</a>师范大学</td>
<td>B-</td>
</tr>
<tr>
<td>93</td>
<td>10755   <a href="https://www.dxsbb.com/news/list_124.html">新疆</a>大学</td>
<td>B-</td>
</tr>
<tr>
<td>94</td>
<td>11414   中国石油大学</td>
<td>B-</td>
</tr>
<tr>
<td>95</td>
<td>91024   空军工程大学</td>
<td>B-</td>
</tr>
<tr>
<td>96</td>
<td>10010   北京化工大学</td>
<td>C+</td>
</tr>
<tr>
<td>97</td>
<td>10032   北京<a href="https://www.dxsbb.com/news/list_199.html">语言</a>大学</td>
<td>C+</td>
</tr>
<tr>
<td>98</td>
<td>10033   中国传媒大学</td>
<td>C+</td>
</tr>
<tr>
<td>99</td>
<td>10059   中国民航大学</td>
<td>C+</td>
</tr>
<tr>
<td>100</td>
<td>10075   <a href="https://www.dxsbb.com/news/list_105.html">河北</a>大学</td>
<td>C+</td>
</tr>
<tr>
<td>101</td>
<td>10080   河北工业大学</td>
<td>C+</td>
</tr>
<tr>
<td>102</td>
<td>10153   沈阳建筑大学</td>
<td>C+</td>
</tr>
<tr>
<td>103</td>
<td>10165   <a href="https://www.dxsbb.com/news/list_107.html">辽宁</a>师范大学</td>
<td>C+</td>
</tr>
<tr>
<td>104</td>
<td>10252   上海理工大学</td>
<td>C+</td>
</tr>
<tr>
<td>105</td>
<td>10264   上海海洋大学</td>
<td>C+</td>
</tr>
<tr>
<td>106</td>
<td>10292   常州大学</td>
<td>C+</td>
</tr>
<tr>
<td>107</td>
<td>10338   浙江理工大学</td>
<td>C+</td>
</tr>
<tr>
<td>108</td>
<td>10345   浙江师范大学</td>
<td>C+</td>
</tr>
<tr>
<td>109</td>
<td>10351   温州大学</td>
<td>C+</td>
</tr>
<tr>
<td>110</td>
<td>10394   <a href="https://www.dxsbb.com/news/list_112.html">福建</a>师范大学</td>
<td>C+</td>
</tr>
<tr>
<td>111</td>
<td>10403   南昌大学</td>
<td>C+</td>
</tr>
<tr>
<td>112</td>
<td>10459   郑州大学</td>
<td>C+</td>
</tr>
<tr>
<td>113</td>
<td>10488   武汉科技大学</td>
<td>C+</td>
</tr>
<tr>
<td>114</td>
<td>10534   湖南科技大学</td>
<td>C+</td>
</tr>
<tr>
<td>115</td>
<td>10602   广西师范大学</td>
<td>C+</td>
</tr>
<tr>
<td>116</td>
<td>10621   成都信息工程大学</td>
<td>C+</td>
</tr>
<tr>
<td>117</td>
<td>10657   <a href="https://www.dxsbb.com/news/list_121.html">贵州</a>大学</td>
<td>C+</td>
</tr>
<tr>
<td>118</td>
<td>10674   昆明理工大学</td>
<td>C+</td>
</tr>
<tr>
<td>119</td>
<td>10710   长安大学</td>
<td>C+</td>
</tr>
<tr>
<td>120</td>
<td>11065   青岛大学</td>
<td>C+</td>
</tr>
<tr>
<td>121</td>
<td>11664   西安邮电大学</td>
<td>C+</td>
</tr>
<tr>
<td>122</td>
<td>10011   北京工商大学</td>
<td>C</td>
</tr>
<tr>
<td>123</td>
<td>10076   河北工程大学</td>
<td>C</td>
</tr>
<tr>
<td>124</td>
<td>10107   石家庄铁道大学</td>
<td>C</td>
</tr>
<tr>
<td>125</td>
<td>10110   中北大学</td>
<td>C</td>
</tr>
<tr>
<td>126</td>
<td>10188   东北电力大学</td>
<td>C</td>
</tr>
<tr>
<td>127</td>
<td>10190   长春工业大学</td>
<td>C</td>
</tr>
<tr>
<td>128</td>
<td>10270   上海师范大学</td>
<td>C</td>
</tr>
<tr>
<td>129</td>
<td>10360   安徽工业大学</td>
<td>C</td>
</tr>
<tr>
<td>130</td>
<td>10414   <a href="https://www.dxsbb.com/news/list_111.html">江西</a>师范大学</td>
<td>C</td>
</tr>
<tr>
<td>131</td>
<td>10456   山东<a href="https://www.dxsbb.com/news/list_197.html">财经</a>大学</td>
<td>C</td>
</tr>
<tr>
<td>132</td>
<td>10460   <a href="https://www.dxsbb.com/news/list_102.html">河南</a>理工大学</td>
<td>C</td>
</tr>
<tr>
<td>133</td>
<td>10462   郑州轻工业学院</td>
<td>C</td>
</tr>
<tr>
<td>134</td>
<td>10530   湘潭大学</td>
<td>C</td>
</tr>
<tr>
<td>135</td>
<td>10564   华南农业大学</td>
<td>C</td>
</tr>
<tr>
<td>136</td>
<td>10700   西安理工大学</td>
<td>C</td>
</tr>
<tr>
<td>137</td>
<td>10702   西安工业大学</td>
<td>C</td>
</tr>
<tr>
<td>138</td>
<td>10712   西北<a href="https://www.dxsbb.com/news/list_203.html">农林</a>科技大学</td>
<td>C</td>
</tr>
<tr>
<td>139</td>
<td>11075   三峡大学</td>
<td>C</td>
</tr>
<tr>
<td>140</td>
<td>11117   扬州大学</td>
<td>C</td>
</tr>
<tr>
<td>141</td>
<td>11258   大连大学</td>
<td>C</td>
</tr>
<tr>
<td>142</td>
<td>11845   <a href="https://www.dxsbb.com/news/list_101.html">广东</a>工业大学</td>
<td>C</td>
</tr>
<tr>
<td>143</td>
<td>10052   中央<a href="https://www.dxsbb.com/news/list_202.html">民族</a>大学</td>
<td>C-</td>
</tr>
<tr>
<td>144</td>
<td>10144   沈阳理工大学</td>
<td>C-</td>
</tr>
<tr>
<td>145</td>
<td>10212   <a href="https://www.dxsbb.com/news/list_113.html">黑龙江</a>大学</td>
<td>C-</td>
</tr>
<tr>
<td>146</td>
<td>10254   上海海事大学</td>
<td>C-</td>
</tr>
<tr>
<td>147</td>
<td>10289   江苏科技大学</td>
<td>C-</td>
</tr>
<tr>
<td>148</td>
<td>10385   华侨大学</td>
<td>C-</td>
</tr>
<tr>
<td>149</td>
<td>10405   东华理工大学</td>
<td>C-</td>
</tr>
<tr>
<td>150</td>
<td>10407   江西理工大学</td>
<td>C-</td>
</tr>
<tr>
<td>151</td>
<td>10421   江西财经大学</td>
<td>C-</td>
</tr>
<tr>
<td>152</td>
<td>10463   河南工业大学</td>
<td>C-</td>
</tr>
<tr>
<td>153</td>
<td>10475   河南大学</td>
<td>C-</td>
</tr>
<tr>
<td>154</td>
<td>10476   河南师范大学</td>
<td>C-</td>
</tr>
<tr>
<td>155</td>
<td>10490   武汉工程大学</td>
<td>C-</td>
</tr>
<tr>
<td>156</td>
<td>10495   武汉纺织大学</td>
<td>C-</td>
</tr>
<tr>
<td>157</td>
<td>10500   <a href="https://www.dxsbb.com/news/list_103.html">湖北</a>工业大学</td>
<td>C-</td>
</tr>
<tr>
<td>158</td>
<td>10536   长沙理工大学</td>
<td>C-</td>
</tr>
<tr>
<td>159</td>
<td>10589   <a href="https://www.dxsbb.com/news/list_125.html">海南</a>大学</td>
<td>C-</td>
</tr>
<tr>
<td>160</td>
<td>10596   桂林理工大学</td>
<td>C-</td>
</tr>
<tr>
<td>161</td>
<td>10615   西南石油大学</td>
<td>C-</td>
</tr>
<tr>
<td>162</td>
<td>10618   重庆交通大学</td>
<td>C-</td>
</tr>
<tr>
<td>163</td>
<td>10623   西华大学</td>
<td>C-</td>
</tr>
<tr>
<td>164</td>
<td>10651   西南财经大学</td>
<td>C-</td>
</tr>
<tr>
<td>165</td>
<td>10705   西安石油大学</td>
<td>C-</td>
</tr>
<tr>
<td>166</td>
<td>11232   北京信息科技大学</td>
<td>C-</td>
</tr>
<tr>
<td>167</td>
<td>11535   湖南工业大学</td>
<td>C-</td>
</tr>
<tr>
<td>168</td>
<td>91019   海军航空大学（原海军航空工程学院）</td>
<td>C-</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>日常</category>
        <category>信息</category>
      </categories>
      <tags>
        <tag>大学</tag>
        <tag>隐藏</tag>
      </tags>
  </entry>
  <entry>
    <title>AI绘画（Stable Diffusion）学习</title>
    <url>/2023-7/AI%E7%BB%98%E7%94%BB%EF%BC%88Stable%20Diffusion%EF%BC%89%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="与其说是AI绘画，不如说是AI图片生成"><a href="#与其说是AI绘画，不如说是AI图片生成" class="headerlink" title="与其说是AI绘画，不如说是AI图片生成"></a>与其说是AI绘画，不如说是AI图片生成</h1><span id="more"></span>

<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><h3 id="Diffusion——扩散"><a href="#Diffusion——扩散" class="headerlink" title="Diffusion——扩散"></a>Diffusion——扩散</h3><p>在AI绘画中，扩散原理是指通过在图像上应用随机噪声，然后使用一些算法将这些噪声逐渐扩散和平滑，最终形成画面的一种技术。这个过程可以通过以下简单的步骤来说明：</p>
<ol>
<li>随机噪声：首先，在一张空白的画布或现有的图像上，添加一些随机的噪声点。这些噪声点可以是随机的像素值或颜色。</li>
<li>扩散算法：通过一些算法对这些噪声点进行处理，使它们逐渐向周围的像素进行扩散。这个过程可以使用邻域像素间的平均值或其他插值算法来实现。</li>
<li>迭代过程：重复进行步骤2，多次迭代地将噪声点扩散到周围的像素，直到达到期望的效果。每个迭代步骤都会使噪声点逐渐模糊和平滑，从而形成更连续的图像。</li>
</ol>
<h2 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h2><h3 id="Easy-Diffusion（简单好上手）"><a href="#Easy-Diffusion（简单好上手）" class="headerlink" title="Easy Diffusion（简单好上手）"></a>Easy Diffusion（简单好上手）</h3><p>搜索Easy Diffusion找到GitHub链接并下载</p>
<p>安装后即可进行使用</p>
<h3 id="Stable-Diffusion（用的-人多）"><a href="#Stable-Diffusion（用的-人多）" class="headerlink" title="Stable Diffusion（用的 人多）"></a>Stable Diffusion（用的 人多）</h3><p>由于安装之后一直报错，貌似是对没有英伟达显卡的电脑不太兼容，就没有继续用下去了</p>
<h2 id="提示词"><a href="#提示词" class="headerlink" title="提示词"></a>提示词</h2>]]></content>
      <categories>
        <category>学习</category>
        <category>软件</category>
        <category>AI绘画</category>
      </categories>
      <tags>
        <tag>未完成</tag>
        <tag>AI</tag>
        <tag>Stable Diffusion</tag>
        <tag>Easy Diffusion</tag>
      </tags>
  </entry>
  <entry>
    <title>C++学习</title>
    <url>/2023-7/C++%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="C-学习"><a href="#C-学习" class="headerlink" title="C++学习"></a>C++学习</h1><h5 id="调用其他cpp文件"><a href="#调用其他cpp文件" class="headerlink" title="调用其他cpp文件"></a>调用其他cpp文件</h5><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">send_message</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* message)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">send_message</span>(<span class="string">&quot;helloworld&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Log.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">send_message</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* message)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; message &lt;&lt; endl;</span><br><span class="line">    cin.<span class="built_in">get</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="include-define"><a href="#include-define" class="headerlink" title="#include    #define"></a>#include    #define</h5><p><strong>作用就是将.h文件中的所有东西复制了一遍到当前文件</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//End.h</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//main.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">send_message</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* message)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Multiplication</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">Multiplication</span>(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;End.h&quot;</span>     <span class="comment">//此处将End.h的右括号复制了过来,仅此而已</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> INTER int <span class="comment">//输入INTER时转化成int</span></span></span><br></pre></td></tr></table></figure>

<h5 id="unsigned"><a href="#unsigned" class="headerlink" title="unsigned"></a>unsigned</h5><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">int</span> a = <span class="number">0</span>    <span class="comment">//定义一个没有负值的整数</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>学习</category>
        <category>编程</category>
        <category>C++</category>
      </categories>
      <tags>
        <tag>未完成</tag>
        <tag>C++</tag>
        <tag>计算机</tag>
        <tag>CTF</tag>
        <tag>备忘</tag>
      </tags>
  </entry>
  <entry>
    <title>CTF学习</title>
    <url>/2023-7/CTF%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="2023-7-19"><a href="#2023-7-19" class="headerlink" title="2023&#x2F;7&#x2F;19"></a>2023&#x2F;7&#x2F;19</h2><h3 id="1-php-post-get"><a href="#1-php-post-get" class="headerlink" title="1.php,post,get"></a>1.php,post,get</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">highlight_file(&#x27;index.php&#x27;);</span><br><span class="line">include(&quot;flag.php&quot;);</span><br><span class="line">$id=$_POST[&#x27;id&#x27;];</span><br><span class="line">$json=json_decode($_GET[&#x27;json&#x27;],true);</span><br><span class="line">if ($id==&quot;wllmNB&quot;&amp;&amp;$json[&#x27;x&#x27;]==&quot;wllm&quot;)</span><br><span class="line">&#123;echo $flag;&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>php代码解析</p>
<ul>
<li>将post的id属性的值赋值到id变量</li>
<li>将get的json熟悉感复制到json</li>
<li>如果id为”wllmNB”，json中的x为”wllm”,则在网页中输出flag</li>
</ul>
<p>实现</p>
<p>hackbar中get栏输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://node2.anna.nssctf.cn:28695/?json=&#123;&quot;x&quot;:&quot;wllm&quot;&#125;</span><br></pre></td></tr></table></figure>

<p>post栏中输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id=wllmNB</span><br></pre></td></tr></table></figure>

<p>点击run按钮，获得flag</p>
<p><img src="/../../upload/image.png" alt="img"></p>
<h3 id="2-php-get-post"><a href="#2-php-get-post" class="headerlink" title="2.php,get,post"></a>2.php,get,post</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"> <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"> <span class="keyword">include</span> <span class="string">&#x27;flag2.php&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$name</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">    <span class="variable">$password</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$name</span> != <span class="variable">$password</span> &amp;&amp; <span class="title function_ invoke__">md5</span>(<span class="variable">$name</span>) == <span class="title function_ invoke__">md5</span>(<span class="variable">$password</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;wrong!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;wrong!&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>要求传入的参数不同而参数的md5相同</p>
<p>所以传入数组使得md5无法加密返回<strong>null</strong></p>
<p><strong>实现</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">params = &#123;<span class="string">&quot;name[]&quot;</span> : <span class="string">&quot;12&quot;</span>&#125;  </span><br><span class="line">data = &#123;<span class="string">&quot;password[]&quot;</span> : <span class="string">&quot;34&quot;</span>&#125;</span><br><span class="line">url = <span class="string">&quot;http://node2.anna.nssctf.cn:28744/&quot;</span></span><br><span class="line">r = requests.post(url,data=data,params=params)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure>

<p><strong>name[]&#x3D;12，意为定义name是一个数组变量，在name的最后面加入12</strong></p>
<p>得到flag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;/code&gt;NSSCTF&#123;15479448-3c72-41fb-8859-a47bab8eb9b3&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
        <category>网络</category>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>计算机</tag>
        <tag>CTF</tag>
        <tag>备忘</tag>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客搭建以及Github pages部署</title>
    <url>/2023-7/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><h3 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h3><p>这里推荐使用keep主题模板的Hexo框架</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/theme-keep/hexo-theme-keep-starter</span><br></pre></td></tr></table></figure>

<h3 id="nodejs"><a href="#nodejs" class="headerlink" title="nodejs"></a>nodejs</h3><p>无论你是用linux还是windows我都推荐你在官网下载(<a href="https://nodejs.org/">https://nodejs.org/</a>)</p>
<h3 id="依赖项"><a href="#依赖项" class="headerlink" title="依赖项"></a>依赖项</h3><p>在clone的目录下运行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd hexo-theme-keep-starter</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>

<h3 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm run server</span><br></pre></td></tr></table></figure>

<h3 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h3><p>在官网安装git，后面会用到</p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p><a href="https://keep-docs.xpoet.cn/">这边建议之间看官方文档，找到自己需要的就行</a></p>
<h2 id="Github-pages-部署"><a href="#Github-pages-部署" class="headerlink" title="Github pages 部署"></a>Github pages 部署</h2><h3 id="连接-Github"><a href="#连接-Github" class="headerlink" title="连接 Github"></a>连接 Github</h3><p>使用邮箱注册 <a href="https://link.zhihu.com/?target=https://github.com/">GitHub</a> 账户，选择免费账户（Free），并完成邮件验证。</p>
<p>右键 -&gt; Git Bash Here，<strong>设置用户名和邮箱</strong>：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;GitHub 用户名&quot;</span><br><span class="line">git config --global user.email &quot;GitHub 邮箱&quot;</span><br></pre></td></tr></table></figure>

<p><strong>创建 SSH 密匙</strong>：</p>
<p>输入 <code>ssh-keygen -t rsa -C &quot;GitHub 邮箱&quot;</code>，然后一路回车。</p>
<p><strong>添加密匙：</strong></p>
<p>进入 [C:\Users\用户名.ssh] 目录（要勾选显示“隐藏的项目”），用记事本打开公钥 id_rsa.pub 文件并复制里面的内容。</p>
<p>登陆 GitHub ，进入 Settings 页面，选择左边栏的 SSH and GPG keys，点击 New SSH key。</p>
<p>Title 随便取个名字，粘贴复制的 id_rsa.pub 内容到 Key 中，点击 Add SSH key 完成添加。</p>
<p><img src="/../../images/v2-9125065afd24332d7cd84feb6a350730_1440w.webp" alt="img"></p>
<p><strong>验证连接：</strong></p>
<p>打开 Git Bash，输入 <code>ssh -T git@github.com</code> 出现 “Are you sure……”，输入 yes 回车确认。</p>
<p><img src="/../../images/v2-b4c7524a2451f4ab42f9c22ea3c7b6be_1440w.webp" alt="img"></p>
<p>显示 “Hi xxx! You’ve successfully……” 即连接成功。</p>
<h3 id="创建-Github-Pages-仓库"><a href="#创建-Github-Pages-仓库" class="headerlink" title="创建 Github Pages 仓库"></a>创建 Github Pages 仓库</h3><p>GitHub 主页右上角加号 -&gt; New repository：</p>
<ul>
<li>Repository name 中输入 <code>用户名.github.io</code></li>
<li>勾选 “Initialize this repository with a README”</li>
<li>Description 选填</li>
</ul>
<p>填好后点击 Create repository 创建。</p>
<p><img src="/../../images/v2-67a8165154f4c5f4a6333e76e78ed815_1440w.webp" alt="img"></p>
<p>创建后默认自动启用 HTTPS，博客地址为：<code>https://用户名.github.io</code></p>
<h3 id="部署-Hexo-到-GitHub-Pages"><a href="#部署-Hexo-到-GitHub-Pages" class="headerlink" title="部署 Hexo 到 GitHub Pages"></a>部署 Hexo 到 GitHub Pages</h3><p>本地博客测试成功后，就是上传到 GitHub 进行部署，使其能够在网络上访问。</p>
<p>首先<strong>安装 hexo-deployer-git</strong>：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p>然后<strong>修改 _config.yml</strong> 文件末尾的 Deployment 部分，修改成如下：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:用户名/用户名.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<p>完成后运行 <code>hexo d</code> 将网站上传部署到 GitHub Pages。</p>
<p>完成！这时访问我们的 GitHub 域名 <code>https://用户名.github.io</code> 就可以看到 Hexo 网站了。</p>
]]></content>
      <categories>
        <category>学习</category>
        <category>网络</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>网络</tag>
        <tag>网站</tag>
        <tag>博客</tag>
        <tag>Github</tag>
        <tag>Linux</tag>
        <tag>nodejs</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo首页如何隐藏文章</title>
    <url>/2023-7/Hexo%E9%A6%96%E9%A1%B5%E5%A6%82%E4%BD%95%E9%9A%90%E8%97%8F%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://blog.ccknbc.cc/posts/how-to-hide-hexo-articles-gracefully/">https://blog.ccknbc.cc/posts/how-to-hide-hexo-articles-gracefully/</a></p>
</blockquote>
<h2 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h2><p>因为在我们的博客中，有些日记，心得，或者其他一些与技术无关的文章是我们并不想让他们出现在首页中的，这时就需要将一些文章从首页中隐藏起来</p>
<h2 id="首页隐藏"><a href="#首页隐藏" class="headerlink" title="首页隐藏"></a>首页隐藏</h2><ul>
<li>前两种方式如果你的源码仓库闭源的话，是完全隐藏的，只有你知道，但是有时候我们只想在首页隐藏部分文章，而不是不公开文章，我们需要更换首页生成插件，执行以下命令</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm uninstall hexo-generator-index</span><br><span class="line">$ npm install hexo-generator-indexed</span><br></pre></td></tr></table></figure>

<p>隐藏文章 ，在文章的 Front-matter 中增加一个 hide 参数用来隐藏</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: example</span><br><span class="line"><span class="section">hide: true</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure>

<p>隐藏特定分类中的文章，在 Hexo 的 <code>_config.yml</code> 中可以通过 <code>hide_categories</code> 选项设置隐藏某个分类下的文章，例如：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">hide_categories:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">categorie1</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">categorie2</span></span><br></pre></td></tr></table></figure>

<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>其实还有几个隐藏文章的方法，但是以上的一个方法就很够用了，感兴趣的可以百度搜索其他方法</p>
]]></content>
      <categories>
        <category>学习</category>
        <category>网络</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>转载</tag>
      </tags>
  </entry>
  <entry>
    <title>PyQt入门教程-QtDesigner工具的使用</title>
    <url>/2023-7/PyQt%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B-QtDesigner%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<blockquote>
<p>如果你是零基础想学习GUI开放，那么我推荐你学习QT</p>
</blockquote>
<span id="more"></span>

<blockquote>
<p><a href="https://blog.csdn.net/stq054188/article/details/117743536">https://blog.csdn.net/stq054188/article/details/117743536</a></p>
</blockquote>
<h2 id="PyQt5入门教程"><a href="#PyQt5入门教程" class="headerlink" title="PyQt5入门教程"></a>PyQt5入门教程</h2><p>2019&#x2F;12&#x2F;11更新：我平时不看CSDN的，之前一时兴起发了过来，没想到反响还不错。这次就顺便把后来新增的一个小节放上来，并且在文末增加了我的GitHub（一看GitHub就知道我是个菜鸡，大家都是互相学习啦~）</p>
<p>注：这是当时闲着无聊写到github page的，在CSDN上也看了大佬们各种各样的教程跟疑难杂症解答，感觉我这个不放出来也有点可惜，希望各位能够从中收益吧。</p>
<p>在网上看了不少关于PyQt5的中文教程，但是无外乎是过时了，讲解不清晰易懂，或者资料不完整。Youtube上面倒是有不少视频，但是不少Youtuber居然还在手写ui而不是利用方便快捷的Qt Designer。仅有的几个视频虽然利用了Qt Designer来设计UI，但是他们并没有将UI跟逻辑分离，这种行为并不是我期望的。</p>
<p>为此，我花费了不少时间在网上寻找各种资料。于是乎，我最终还是下定决心把自己的学习过程给记录下来。记录下来是给我自己复习跟参考的，如果有人能够从中受益，那也挺好，不用浪费时间去到处找答案。</p>
<h2 id="0x00-安装环境清单"><a href="#0x00-安装环境清单" class="headerlink" title="0x00 安装环境清单"></a>0x00 安装环境清单</h2><p>我使用的环境如下：</p>
<ul>
<li>Windows 10 (Build 17763)</li>
<li>Python 3.7.2</li>
<li>VSCode 1.33.0</li>
<li>PyQt5</li>
<li>Qt Designer</li>
</ul>
<p>如果你使用的是OSX或者Linux，请自行替换教程中的一些操作。</p>
<p>本文并不讨论Python和VSCode的安装，如果没有VSCode，你可以用各种同类IDE替代或者安装它。</p>
<p>本文不讨论多Python共存，毕竟Python2.7在2020年就要退役了，而且我本人也没这需求。</p>
<h2 id="0x01-安装PyQt5"><a href="#0x01-安装PyQt5" class="headerlink" title="0x01 安装PyQt5"></a>0x01 安装PyQt5</h2><p>下面直接使用pip来安装PyQt5，此处可能是pip&#x2F;pip3，或者两者皆可，后面不再重复</p>
<p>直接pip安装PyQt5</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">pip install PyQt5</span><br></pre></td></tr></table></figure>

<p>由于Qt Designer已经在Python3.5版本从PyQt5转移到了tools，因此我们还需要安装pyqt5-tools</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">pip install pyqt5-tools</span><br></pre></td></tr></table></figure>

<p>到这一步，PyQt5就安装完成了，你可以通过下面若干可选的操作来检查是否已经安装成功：</p>
<ul>
<li>Win+S呼出Cornata主面板（搜索框），输入designer，如果看到跟下图类似的结果说明PyQt Designer已经被安装</li>
</ul>
<p><img src="/../../images/v2-78c05530eef302568bcc544c811ee7b8_720w.webp" alt="img"></p>
<ul>
<li>在cmd中输入pyuic5，如果返回“Error: one input ui-file must be specified”说明安装成功。</li>
</ul>
<h2 id="0x02-初识Qt-Designer"><a href="#0x02-初识Qt-Designer" class="headerlink" title="0x02 初识Qt Designer"></a>0x02 初识Qt Designer</h2><p>注：Qt Designer的界面是全英文的，幸运的是有汉化方法，不过因为我本人用不上，所以如果有这方面需求可以自行搜索。</p>
<p>我比较习惯用Win+S呼出Cornata主面板（搜索框）来启动各种应用，那么这里就是在搜索框中输入designer并敲回车，就能够启动Qt Designer了。</p>
<p>初次启动会弹出这个“New Form”窗口，一般来说选择“Main Window”然后点击“Create”就可以了。下方有个“Show this Dialogue on Startup”的checkbox，如果不想每次启动都看到这个“New Form”窗口，可以取消勾选。</p>
<p><img src="/../../images/v2-58dab43a63f45d7c31c064cdd56c8911_720w.webp" alt="img"></p>
<p>创建“Main Window”之后，我们会看到如下画面</p>
<p><img src="/../../images/v2-74a71014e5ad5def0cc0102d5ac9b6a6_720w.webp" alt="img"></p>
<p>下面就来简单介绍下整个画面的构成：</p>
<ul>
<li>左侧的“Widget Box”就是各种可以自由拖动的组件</li>
<li>中间的“MainWindow - untitled”窗体就是画布</li>
<li>右上方的”Object Inspector”可以查看当前ui的结构</li>
<li>右侧中部的”Property Editor”可以设置当前选中组件的属性</li>
<li>右下方的”Resource Browser”可以添加各种素材，比如图片，背景等等，目前可以不管</li>
</ul>
<p>大致了解了每个板块之后，就可以正式开始编写第一个UI了</p>
<h2 id="0x03-HelloWorld"><a href="#0x03-HelloWorld" class="headerlink" title="0x03 HelloWorld!"></a>0x03 HelloWorld!</h2><p>注：从这里开始，相关代码可以在&#x2F;assets&#x2F;code&#x2F;pyqt5中找到</p>
<p>注：本文用到的代码都在我github，就不在CSDN这里上传了</p>
<p>通常来说，编写GUI有两种方法：第一种就是直接使用方便快捷的Qt Designer，第二种就是写代码。在有Qt Designer的情况下，是完全不推荐费时费力去手写GUI代码的。Qt Designer可以所见即所得，并且可以方便的修改并做出各种调整。</p>
<p>按照惯例，我们先来实现一个能够显示HelloWorld的窗口。</p>
<p>1）添加文本</p>
<p>在左侧的“Widget Box”栏目中找到“Display Widgets”分类，将“Label”拖拽到屏幕中间的“MainWindow”画布上，你就获得了一个仅用于显示文字的文本框，如下图所示。</p>
<p><img src="/../../images/v2-945a7532062f9fd614fc7f49cd8a9764_720w.webp" alt="img"></p>
<p>2）编辑文本</p>
<p>双击上图中的“TextLabel”，就可以对文本进行编辑，这里我们将其改成“HelloWorld!”，如下图所示。如果文字没有完全展示出来，可以自行拖拽空间改变尺寸。</p>
<p>特别提醒，编辑完文本之后记得敲击回车令其生效！</p>
<p><img src="/../../images/v2-5fa095e8f9352b155a88974ca8865fc1_720w.webp" alt="img"></p>
<p>3）添加按钮</p>
<p>使用同样的方法添加一个按钮（PushButton）并将其显示的文本改成“HelloWorld!”，如下图所示。</p>
<p><img src="/../../images/v2-f092311657e38bcee467f6e9db912e79_720w.webp" alt="img"></p>
<p>4）修改窗口标题</p>
<p>下面修改窗口标题。选中右上方的”Object Inspector”中的“MainWindow”，然后在右侧中部的”Property Editor”中找到“windowTitle”这个属性，在Value这一栏进行修改，修改完记得敲击回车。</p>
<p>5）编辑菜单栏</p>
<p>注意到画布的左上方有个“Type Here”，双击它即可开始编辑菜单栏。菜单栏支持创建多级菜单以及分割线（separator）。我随意创建了一些菜单项目，如下图所示。</p>
<p><img src="/../../images/v2-7ebffb47fdd288df28306d223f3a42ff_720w.webp" alt="img"></p>
<p>6）预览</p>
<p>使用快捷键Ctrl+R预览当前编写的GUI（或者从菜单栏的Form &gt; Preview &#x2F; Preview in进入）</p>
<p><img src="https://pic3.zhimg.com/80/v2-691640340fbf03486794f645f2733ee2_720w.webp" alt="img"></p>
<p>7）保存</p>
<p>如果觉得完成了，那就可以保存成*.ui的文件，这里我们保存为HelloWorld.ui。为了方便演示，我将文件保存到D盘。</p>
<p>8）生成Python代码</p>
<p>使用cmd将目录切到D盘并执行下面的命令。请自行将下面命令中的name替换成文件名，比如本例中的“HelloWorld.ui”</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">pyuic5 -o name.py name.ui</span><br></pre></td></tr></table></figure>

<p>生成的代码应该类似下图所示</p>
<p>9）运行Python代码</p>
<p>此时尝试运行刚刚生成的“HelloWorld.py”是没用的，因为生成的文件并没有程序入口。因此我们在同一个目录下另外创建一个程序叫做“main.py”，并输入如下内容。在本例中，gui_file_name就是HelloWorld，请自行替换。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">import sys</span><br><span class="line">from PyQt5.QtWidgets import QApplication, QMainWindow</span><br><span class="line"></span><br><span class="line">import gui_file_name</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    MainWindow = QMainWindow()</span><br><span class="line">    ui = gui_file_name.Ui_MainWindow()</span><br><span class="line">    ui.setupUi(MainWindow)</span><br><span class="line">    MainWindow.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure>

<p>然后运行“main.py”，你就能看到刚刚编写的GUI了！</p>
<p><img src="/../../images/v2-97066643aaf1f129e6ed1dfb3f6bb882_720w.webp" alt="img"></p>
<p>10）组件自适应</p>
<p>如果你刚刚尝试去缩放窗口，会发现组件并不会自适应缩放，因此我们需要回到Qt Designer中进行一些额外的设置。</p>
<p>点击画布空白处，然后在上方工具栏找到grid layout或者form layout，在本例中我们使用grid layout。两种layout的图标如下图所示。</p>
<p><img src="/../../images/v2-26be2a271f417b0f7627a7579e0d3607_720w.webp" alt="img"></p>
<p>顺带一提，上图中layout的左边有三条横线以及三条竖线的图标，这两个是用于对齐组件，非常实用。</p>
<p>设置grid layout后，我们使用Ctrl+R预览，这次组件可以自适应了！因为我们已经将UI（HelloWorld.py&#x2F;HelloWorld.ui）跟逻辑（main.py）分离，因此直接重复步骤7-8即可完成UI的更新，无需改动逻辑（main.py）部分。</p>
<h2 id="0x04-Interaction"><a href="#0x04-Interaction" class="headerlink" title="0x04 Interaction"></a>0x04 Interaction</h2><p>刚刚写的HelloWorld中，我们设置的按钮（PushButton）是没有实际作用的，因为我们并没有告诉这个按钮应该做什么。实际上，要让这个按钮做点什么只需要增加一行代码就可以了。</p>
<p>1）获取按钮id</p>
<p>打开HelloWorld.ui，在designer中选中对应的按钮，从“Property Editor”中可以得知这个按钮的“objectName”叫做“pushButton”，如下图所示。</p>
<p><img src="https://pic2.zhimg.com/80/v2-cf27aa71db6dd7b68db500bf8579f1f1_720w.webp" alt="img"></p>
<p>2）设置触发</p>
<p>Qt中有“信号和槽(signal and slot)”这个概念，不过目前无需深究，也无需在Designer中去设置对应按钮的“信号和槽”，直接在“main.py”中“MainWindow.show()”的后面加入下面这样的一行代码</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">ui.pushButton.clicked.connect(click_success)</span><br></pre></td></tr></table></figure>

<p>下面简单解释下这行代码</p>
<ul>
<li>pushButton就是刚刚获取的按钮id</li>
<li>clicked就是信号，因为是点击，所以我们这里用clicked</li>
<li>click_success就是对应要调用的槽，注意这里函数并不写成click_success()</li>
</ul>
<p>3）设置函数</p>
<p>既然刚刚设置了按钮的触发并绑定了一个函数click_success，我们就要在“main.py”中实现它。示例如下</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">def click_success():</span><br><span class="line">    print(&quot;啊哈哈哈我终于成功了！&quot;)</span><br></pre></td></tr></table></figure>

<p>4）运行！</p>
<p>UI跟逻辑分离的好处就在这里，我们这次不用去管“HelloWorld.py”了，直接运行修改完的“main.py”。点击按钮，这次你会发现在控制台中有了我们预设的输出。</p>
<h2 id="0x05-Conversion"><a href="#0x05-Conversion" class="headerlink" title="0x05 Conversion"></a>0x05 Conversion</h2><p>这次我们来进行实战演练，编写一个带GUI的汇率转换器。</p>
<p>1）设计UI</p>
<p><img src="https://pic1.zhimg.com/80/v2-f2268d636aef8f01d8d8d383d09199dc_720w.webp" alt="img"></p>
<p>通过上面的讲解，你应该能够毫无压力的设计上面这样的UI并获得对应的代码。如果不行，那么不建议继续往下阅读，应当回头复习。</p>
<p>2）传参</p>
<p>现在我们有了GUI的代码以及上一节中使用的“main.py”，我们可以开始编写这个汇率转换器的逻辑部分。</p>
<p>在上一节，我们介绍了如何让按钮响应点击操作，但是并没有接受任何参数，而且只是在控制台输出。但是，上一节中说明了并不能通过正常的方式进行传参。因此，对于传参，有两种解决方案，一种是使用lambda，还有一种是使用functool.partial。在接下来的环节中我们会使用partial。</p>
<p>partial的用法如下所示：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">partial(function, arg1, arg2, ......)</span><br></pre></td></tr></table></figure>

<p>既然使用partial传参，那么我们就要在程序（main.py）的头部加上下面这行。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> partia</span><br></pre></td></tr></table></figure>

<p>然后我们把上一节中的按钮触发那行代码修改成下面这样。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ui.pushButton.clicked.connect(partial(convert, ui))</span><br></pre></td></tr></table></figure>

<p>3）编写convert函数</p>
<p>首先，我们要获取用户输入的数字。为了使得教程简洁易懂，我们这次只讲解单向的汇率转换。既然是单项的转换，那么我们只需要获取左侧的文本框id。在本例中，左侧的文本框id为lineEdit。如果你对此感到一头雾水，请停下并回头复习。</p>
<p>获取文本使用的是text()方法，因此读取用户输入的代码如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">input</span> = ui.lineEdit.text()</span><br></pre></td></tr></table></figure>

<p>接着我们进行汇率转换，注意这里要进行类型转换</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result = <span class="built_in">float</span>(<span class="built_in">input</span>) * <span class="number">6.7</span></span><br></pre></td></tr></table></figure>

<p>最后我们让右边的文本框显示结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ui.lineEdit_2.setText(<span class="built_in">str</span>(result))</span><br></pre></td></tr></table></figure>

<p>下面是convert函数的代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">convert</span>(<span class="params">ui</span>):</span><br><span class="line">    <span class="built_in">input</span> = ui.lineEdit.text()</span><br><span class="line">    result = <span class="built_in">float</span>(<span class="built_in">input</span>) * <span class="number">6.7</span></span><br><span class="line">    ui.lineEdit_2.setText(<span class="built_in">str</span>(result))<span class="number">1234</span></span><br></pre></td></tr></table></figure>

<p>一个简单的汇率转换器就这样诞生了！</p>
<p>那么，如何知道一个组件都有什么方法呢？直接去<a href="https://link.zhihu.com/?target=https://doc.qt.io/archives/qt-4.8/qtgui-module.html">Qt官方文档</a>查看就可以了。本节使用到的lineEdit的相关方法在<a href="https://link.zhihu.com/?target=https://doc.qt.io/archives/qt-4.8/qtextedit.html">这里</a></p>
<h2 id="0x06-threading"><a href="#0x06-threading" class="headerlink" title="0x06 threading"></a>0x06 threading</h2><p>1）前言</p>
<p>这几天在用PyQt5写东西的时候遇到这样一个问题，网上资料也特别少，我感觉值得拿出来说一说。</p>
<p>我的程序中使用了threading模块，GUI作为主线程去启动负责逻辑处理的子线程。其中，我设计的GUI里头有一个日志框，用来代替终端显示各种日志输出。既然子线程是负责逻辑处理，那么想当然的就会直接在子线程操作GUI的显示。</p>
<p>都说了想当然，那当然不行咯，在子线程对GUI操作的时候，终端会出现下面这个错误，但是程序又不会马上闪退。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">QObject::connect: Cannot queue arguments of type &#x27;QTextCursor&#x27;</span><br><span class="line">(Make sure &#x27;QTextCursor&#x27; is registered using qRegisterMetaType().)</span><br></pre></td></tr></table></figure>

<p>更让人摸不着头脑的是，过一阵子闪退的时候，会出现下面这句话：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">段错误，核心已转储</span><br></pre></td></tr></table></figure>

<p>这啥玩意儿？能说人话么？一番搜索之后，发现这个原来英语叫做“Segmentation fault (core dumped)”。</p>
<p>“Segmentation fault”用人话来说大概就是“你尝试访问你无法访问的内存”。</p>
<p>然后我把上面的报错信息搜索了下，发现之前有人在StackOverflow问过，但是答案牛头不对马嘴，不过倒是在评论区发现了大佬的留言。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">It is likely that the asker was not actually directly using QTextCursor, but rather using GUI code from a thread that was not the GUI thread. Attempting this seems to result in this error arising from Qt-internal code, e.g. for QTextEdit.append()</span><br></pre></td></tr></table></figure>

<p>简而言之，就是说虽然报错显示QTextCursor，但是实际上是在其它线程通过Qt内部的方法间接调用了这个东西。</p>
<p>热心大佬还留了个<a href="https://link.zhihu.com/?target=https://stackoverflow.com/questions/2104779/qobject-qplaintextedit-multithreading-issues">链接</a>，我跟过去看了，收获不少。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">It appears you&#x27;re trying to access QtGui classes from a thread other than the main thread. Like in some other GUI toolkits (e.g. Java Swing), that&#x27;s not allowed.</span><br><span class="line"></span><br><span class="line">Although QObject is reentrant, the GUI classes, notably QWidget and all its subclasses, are not reentrant. They can only be used from the main thread.</span><br></pre></td></tr></table></figure>

<p>这个终于说到点子上了，一句话总结就是子线程不能调用主线程的QtGui类。</p>
<p>所以大佬给出的方案如下：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">A solution is to use signals and slots for communication between the main thread (where the GUI objects live) and your secondary thread(s). Basically, you emit signals in one thread that get delivered to the QObjects via the other thread.</span><br></pre></td></tr></table></figure>

<p>大概翻译下，就是说可以通过信号和槽来完成子线程跟GUI所在的主线程的通信，就是通过在子线程释放信号，传递到主线程的槽来完成。</p>
<p>可惜的是，大佬并没有给出示例代码，那接下来就是动手实践了。</p>
<p>2）实践</p>
<p>首先我们在子线程的代码中创建一个对象，并且继承QObject（因为需要释放信号）。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UpdateLog</span>(<span class="title class_ inherited__">QObject</span>):</span><br><span class="line">    update_signal = pyqtSignal()</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        QObject.__init__(self)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self</span>):</span><br><span class="line">        self.update_signal.emit()</span><br></pre></td></tr></table></figure>

<p><code>update_signal = pyqtSignal()</code>就是使用Signal类来创建一个自定义的信号。</p>
<p><code>self.update_signal.emit()</code>就是当条件满足的时候，子线程可以调用UpdateLog类的update方法，就会发出信号。</p>
<p>做完这些之后，主线程中别忘了连击信号和槽，比如<code>self.afk.utils.logger.update_signal.connect(self.write_log)</code>。然后现在再尝试运行程序，就没有任何问题了。</p>
<p>不仅如此，其实其它需要共享的信息，也可以通过自定义信号和槽来传递。</p>
<p>那么，现在就可以愉快的在PyQt程序中使用threading模块了。</p>
<h2 id="0x0-小结"><a href="#0x0-小结" class="headerlink" title="0x0? 小结"></a>0x0? 小结</h2><p>本文只是抛砖引玉，上面这些只是PyQt5的入门内容。不过学会了简单的交互方法，其它的也差不多能依葫芦画瓢做出来。</p>
<p>本文中设计的程序在&#x2F;assets&#x2F;code&#x2F;pyqt5中。</p>
<p>那么，就先写到这里了！</p>
<p>完整文件下载地址：</p>
]]></content>
      <categories>
        <category>学习</category>
        <category>编程</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>转载</tag>
        <tag>Qt</tag>
        <tag>GUI</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python爬取B站视频</title>
    <url>/2023-7/Python%E7%88%AC%E5%8F%96B%E7%AB%99%E8%A7%86%E9%A2%91/</url>
    <content><![CDATA[<h3 id="1-请求网页数据"><a href="#1-请求网页数据" class="headerlink" title="1.请求网页数据"></a>1.请求网页数据</h3><p>需要传入User-Agent，Referer，Cookie</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">url = <span class="string">&quot;https://www.bilibili.com/video/BV1vv411K7Pe/&quot;</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36 Edg/114.0.1823.82&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;Referer&quot;</span>: <span class="string">&quot;https://www.bilibili.com&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;Cookie&quot;</span>: <span class="string">&quot;buvid3=9E2318CA-B6B3-145A-16D0-B43036FBB28839186infoc; i-wanna-go-back=-1; b_ut=7; _uuid=......&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">r = requests.get(url=url, headers=headers)</span><br></pre></td></tr></table></figure>

<h3 id="2-分析网页数据"><a href="#2-分析网页数据" class="headerlink" title="2.分析网页数据"></a>2.分析网页数据</h3><p>re.findall()：寻找所有匹配项</p>
<p>json.load()：将str类型转化为json类型</p>
<p>string.replace(“ “,””)：将空格删除</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># re.findall(数据，数据源)</span></span><br><span class="line">video_name = re.findall(</span><br><span class="line">    <span class="string">&#x27;&lt;h1 title=&quot;(.*?)&quot; class=&quot;video-title&quot; data-v-4f1c0915&gt;&#x27;</span>, r.text)</span><br><span class="line">video_name = video_name[<span class="number">0</span>].replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">vedio_data = re.findall(<span class="string">&#x27;&lt;script&gt;window.__playinfo__=(.*?)&lt;/script&gt;&#x27;</span>, r.text)</span><br><span class="line">vedio_data = vedio_data[<span class="number">0</span>].replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">json_data = json.loads(vedio_data)</span><br><span class="line">video_url = json_data[<span class="string">&quot;data&quot;</span>][<span class="string">&quot;dash&quot;</span>][<span class="string">&quot;video&quot;</span>][<span class="number">0</span>][<span class="string">&quot;baseUrl&quot;</span>]</span><br><span class="line">audio_url = json_data[<span class="string">&quot;data&quot;</span>][<span class="string">&quot;dash&quot;</span>][<span class="string">&quot;audio&quot;</span>][<span class="number">0</span>][<span class="string">&quot;baseUrl&quot;</span>]</span><br></pre></td></tr></table></figure>

<h3 id="3-获取视频"><a href="#3-获取视频" class="headerlink" title="3.获取视频"></a>3.获取视频</h3><p>需要手动下载ffmpeg</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># .content：获取二进制数据</span><br><span class="line">video_content = requests.get(url=video_url, headers=headers).content</span><br><span class="line">audio_content = requests.get(url=audio_url, headers=headers).content</span><br><span class="line"></span><br><span class="line">with open(&quot;video/&quot;+video_name+&quot;.mp4&quot;, &quot;wb&quot;) as f:</span><br><span class="line">    f.write(video_content)</span><br><span class="line"></span><br><span class="line">with open(&quot;audio/&quot;+video_name+&quot;.mp3&quot;, &quot;wb&quot;) as f:</span><br><span class="line">    f.write(audio_content)</span><br><span class="line"></span><br><span class="line">subprocess.run(</span><br><span class="line">    f&quot;./ffmpeg-master-latest-win64-gpl/bin/ffmpeg.exe -i audio/&#123;video_name&#125;.mp3 -i video/&#123;video_name&#125;.mp4 -c:v copy -c:a copy &#123;video_name&#125;.mp4&quot;)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
        <category>编程</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>计算机</tag>
        <tag>Python</tag>
        <tag>编程</tag>
        <tag>B站</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>Tkinter备忘</title>
    <url>/2023-7/Tkinter%E5%A4%87%E5%BF%98/</url>
    <content><![CDATA[<h2 id="主窗口常用方法"><a href="#主窗口常用方法" class="headerlink" title="主窗口常用方法"></a>主窗口常用方法</h2><h3 id="美化窗口（用ttk覆盖）"><a href="#美化窗口（用ttk覆盖）" class="headerlink" title="美化窗口（用ttk覆盖）"></a>美化窗口（用ttk覆盖）</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> tkinter.ttk <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure>

<h3 id="创建主窗口"><a href="#创建主窗口" class="headerlink" title="创建主窗口"></a>创建主窗口</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"></span><br><span class="line">root = tk.Tk()</span><br></pre></td></tr></table></figure>

<h3 id="设置窗口标题"><a href="#设置窗口标题" class="headerlink" title="设置窗口标题"></a>设置窗口标题</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">root.title(<span class="string">&quot;test&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="设置窗口大小"><a href="#设置窗口大小" class="headerlink" title="设置窗口大小"></a>设置窗口大小</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">root.geometry(<span class="string">&#x27;450x300&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="获取屏幕大小和窗口大小"><a href="#获取屏幕大小和窗口大小" class="headerlink" title="获取屏幕大小和窗口大小"></a>获取屏幕大小和窗口大小</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 该操作会受到电脑缩放设置的影响</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;电脑的分辨率是%dx%d&quot;</span>%(root.winfo_screenwidth(),root.winfo_screenheight()))</span><br><span class="line"><span class="comment"># 要求窗口的大小，必须先刷新一下屏幕</span></span><br><span class="line">root.update()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;窗口的分辨率是%dx%d&quot;</span>%(root.winfo_width(),root.winfo_height()))</span><br></pre></td></tr></table></figure>

<h3 id="更改背景色"><a href="#更改背景色" class="headerlink" title="更改背景色"></a>更改背景色</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">root.config(background=<span class="string">&quot;#6fb765&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="设置窗口最大和最小调整范围"><a href="#设置窗口最大和最小调整范围" class="headerlink" title="设置窗口最大和最小调整范围"></a>设置窗口最大和最小调整范围</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 与resizble()冲突</span></span><br><span class="line">root.maxsize(<span class="number">600</span>,<span class="number">600</span>)</span><br><span class="line">root.minsize(<span class="number">50</span>,<span class="number">50</span>)</span><br></pre></td></tr></table></figure>

<h3 id="更改左上角窗口的的icon图标"><a href="#更改左上角窗口的的icon图标" class="headerlink" title="更改左上角窗口的的icon图标"></a>更改左上角窗口的的icon图标</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">root.iconbitmap(<span class="string">&#x27;C:/Users/Administrator/Desktop/favicon.ico&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="设置主窗口的背景颜色"><a href="#设置主窗口的背景颜色" class="headerlink" title="设置主窗口的背景颜色"></a>设置主窗口的背景颜色</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 颜色值可以是英文单词，或者颜色值的16进制数,除此之外还可以使用Tk内置的颜色常量</span></span><br><span class="line">root[<span class="string">&quot;background&quot;</span>] = <span class="string">&quot;#C9C9C9&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="进入主循环，显示主窗口"><a href="#进入主循环，显示主窗口" class="headerlink" title="进入主循环，显示主窗口"></a>进入主循环，显示主窗口</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure>

<h2 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h2><h3 id="添加按钮，使其拥有退出功能"><a href="#添加按钮，使其拥有退出功能" class="headerlink" title="添加按钮，使其拥有退出功能"></a>添加按钮，使其拥有退出功能</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">button=tk.Button(root,text=<span class="string">&quot;关闭&quot;</span>,command=root.quit)</span><br></pre></td></tr></table></figure>

<h3 id="添加按钮，以及按钮的文本，并通过command-参数设置关闭窗口的功能"><a href="#添加按钮，以及按钮的文本，并通过command-参数设置关闭窗口的功能" class="headerlink" title="添加按钮，以及按钮的文本，并通过command 参数设置关闭窗口的功能"></a>添加按钮，以及按钮的文本，并通过command 参数设置关闭窗口的功能</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">button = tk.Button(root,text=<span class="string">&quot;关闭&quot;</span>,command=root.quit,width=<span class="string">&quot;10&quot;</span>,height=<span class="string">&quot;3&quot;</span>,bg=<span class="string">&quot;red&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="文本框"><a href="#文本框" class="headerlink" title="文本框"></a>文本框</h2><h3 id="添加文本内-设置字体的前景色和背景色，和字体类型、大小"><a href="#添加文本内-设置字体的前景色和背景色，和字体类型、大小" class="headerlink" title="添加文本内,设置字体的前景色和背景色，和字体类型、大小"></a>添加文本内,设置字体的前景色和背景色，和字体类型、大小</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">text=tk.Label(root,text=<span class="string">&quot;C语言中文网欢迎您&quot;</span>,bg=<span class="string">&quot;yellow&quot;</span>,fg=<span class="string">&quot;red&quot;</span>,font=(<span class="string">&#x27;Times&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;bold italic&#x27;</span>))</span><br></pre></td></tr></table></figure>

<h3 id="将文本内容放置在主窗口内"><a href="#将文本内容放置在主窗口内" class="headerlink" title="将文本内容放置在主窗口内"></a>将文本内容放置在主窗口内</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">text.pack()</span><br></pre></td></tr></table></figure>

<h2 id="提示框"><a href="#提示框" class="headerlink" title="提示框"></a>提示框</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">messagebox.showinfo(<span class="string">&quot;提示&quot;</span>, <span class="string">&quot;这是一个简单的提示框！&quot;</span>) </span><br></pre></td></tr></table></figure>

<h2 id="列表框"><a href="#列表框" class="headerlink" title="列表框"></a>列表框</h2><h3 id="添加内容"><a href="#添加内容" class="headerlink" title="添加内容"></a>添加内容</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 尾部</span></span><br><span class="line">listbox.insert(END, i)</span><br><span class="line"><span class="comment"># 头部</span></span><br><span class="line">listbox.insert(<span class="number">0</span>, i)</span><br></pre></td></tr></table></figure>

<h3 id="获取选中内容"><a href="#获取选中内容" class="headerlink" title="获取选中内容"></a>获取选中内容</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">selected_index = listbox.curselection()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> selected_index:</span><br><span class="line">    selected_value = listbox.get(selected_index)</span><br><span class="line">    <span class="built_in">print</span>(selected_value)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;No option selected&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="grid-对齐方法应用"><a href="#grid-对齐方法应用" class="headerlink" title="grid() 对齐方法应用"></a>grid() 对齐方法应用</h2><h3 id="插入控件"><a href="#插入控件" class="headerlink" title="插入控件"></a>插入控件</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># row为竖，column为横</span></span><br><span class="line">label1.grid(row=<span class="number">0</span>, column=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<h3 id="配置控件之间的间隔"><a href="#配置控件之间的间隔" class="headerlink" title="配置控件之间的间隔"></a>配置控件之间的间隔</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">root.grid_columnconfigure(<span class="number">0</span>, pad=<span class="number">5</span>)</span><br><span class="line">root.grid_rowconfigure(<span class="number">0</span>, pad=<span class="number">10</span>)</span><br></pre></td></tr></table></figure>

<h3 id="配置控件与窗口之间的距离"><a href="#配置控件与窗口之间的距离" class="headerlink" title="配置控件与窗口之间的距离"></a>配置控件与窗口之间的距离</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root.config(pady=10, padx=10)</span><br></pre></td></tr></table></figure>


<h3 id="文件选择"><a href="#文件选择" class="headerlink" title="文件选择"></a>文件选择</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> filedialog</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">select_file</span>():</span><br><span class="line">    <span class="comment"># 单个文件选择</span></span><br><span class="line">    selected_file_path = filedialog.askopenfilename()  <span class="comment"># 使用askopenfilename函数选择单个文件</span></span><br><span class="line">    select_path.<span class="built_in">set</span>(selected_file_path)  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">select_files</span>():</span><br><span class="line">    <span class="comment"># 多个文件选择</span></span><br><span class="line">    selected_files_path = filedialog.askopenfilenames()  <span class="comment"># askopenfilenames函数选择多个文件</span></span><br><span class="line">    select_path.<span class="built_in">set</span>(<span class="string">&#x27;\n&#x27;</span>.join(selected_files_path))  <span class="comment"># 多个文件的路径用换行符隔开</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">select_folder</span>():</span><br><span class="line">    <span class="comment"># 文件夹选择</span></span><br><span class="line">    selected_folder = filedialog.askdirectory()  <span class="comment"># 使用askdirectory函数选择文件夹</span></span><br><span class="line">    select_path.<span class="built_in">set</span>(selected_folder)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>学习</category>
        <category>编程</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>计算机</tag>
        <tag>备忘</tag>
        <tag>GUI</tag>
        <tag>Python</tag>
        <tag>编程</tag>
        <tag>Tkinter</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2023-7/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>学习</category>
        <category>网络</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Python常用指令备忘</title>
    <url>/2023-7/python%E5%A4%87%E5%BF%98/</url>
    <content><![CDATA[<h3 id="shutil常用指令"><a href="#shutil常用指令" class="headerlink" title="shutil常用指令"></a>shutil常用指令</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">shutil.copytree(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>, dirs_exist_ok=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">shutil.copy(src, dst): <span class="comment"># 将src文件复制到dst路径。</span></span><br><span class="line"></span><br><span class="line">shutil.copytree(src, dst): <span class="comment">#将src目录复制到dst路径，包括子目录和文件。</span></span><br><span class="line"></span><br><span class="line">shutil.move(src, dst): <span class="comment">#将src文件/目录移动到dst路径。</span></span><br><span class="line"></span><br><span class="line">shutil.rmtree(path):<span class="comment"># 递归地删除path目录。</span></span><br><span class="line"></span><br><span class="line">shutil.make_archive(base_name, <span class="built_in">format</span>, root_dir): <span class="comment">#创建压缩包，可以将整个目录打包成zip文件或tar文件等。</span></span><br><span class="line"></span><br><span class="line">shutil.unpack_archive(filename, extract_dir): <span class="comment">#解压缩文件，可以解压缩zip文件、tar文件等。</span></span><br></pre></td></tr></table></figure>

<h3 id="os-path常用指令"><a href="#os-path常用指令" class="headerlink" title="os.path常用指令"></a>os.path常用指令</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">os.path.abspath(path)：<span class="comment">#返回一个规范化的绝对路径。</span></span><br><span class="line">os.path.basename(path)：<span class="comment">#返回文件名。</span></span><br><span class="line">os.path.dirname(path)：<span class="comment">#返回文件路径。</span></span><br><span class="line">os.path.exists(path)：<span class="comment">#判断路径是否存在。</span></span><br><span class="line">os.path.isfile(path)：<span class="comment">#判断路径是否为文件。</span></span><br><span class="line">os.path.isdir(path)：<span class="comment">#判断路径是否为目录。</span></span><br><span class="line">os.path.join(path1 [, path2 [, ...]])：<span class="comment">#连接多个路径名组件。</span></span><br><span class="line">os.path.split(path)：<span class="comment">#分割文件路径与文件名。</span></span><br><span class="line">os.path.splitext(path)：<span class="comment">#分离文件名与扩展名。</span></span><br><span class="line">os.path.commonprefix(<span class="built_in">list</span>)：<span class="comment">#返回多个路径的公共部分。</span></span><br><span class="line"></span><br><span class="line">os.environ[<span class="string">&#x27;USERPROFILE&#x27;</span>] <span class="comment">#获取用户目录</span></span><br></pre></td></tr></table></figure>

<h3 id="subprocess用法"><a href="#subprocess用法" class="headerlink" title="subprocess用法"></a>subprocess用法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 运行exe文件，并等待其运行完成</span></span><br><span class="line">subprocess.run(exe_file_path)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行exe文件，并在后台运行</span></span><br><span class="line">subprocess.Popen(exe_file_path, shell=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<h3 id="string用法"><a href="#string用法" class="headerlink" title="string用法"></a>string用法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">text = <span class="string">&quot;这是-一个-字符串&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过split()方法对字符串进行分隔</span></span><br><span class="line">split_text = text.split(<span class="string">&quot;-&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="pyautogui用法"><a href="#pyautogui用法" class="headerlink" title="pyautogui用法"></a>pyautogui用法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pyautogui</span><br><span class="line"></span><br><span class="line">pyautogui.FAILSAFE = <span class="literal">False</span></span><br><span class="line">pyautogui.PAUSE = <span class="number">0.023</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    region = (<span class="number">649</span>,<span class="number">800</span>,<span class="number">1024</span>,<span class="number">300</span>) <span class="comment"># 在649，800做标取一个</span></span><br><span class="line">    coords = pyautogui.locateOnScreen(<span class="string">&#x27;kun.png&#x27;</span>, confidence=<span class="number">0.7</span>,region=region)</span><br><span class="line">    <span class="keyword">if</span> coords == <span class="literal">None</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;没有找到&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line"></span><br><span class="line">        x,y = pyautogui.center(coords)</span><br><span class="line">        pyautogui.leftClick(x,y)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;找到了&quot;</span>)a = pyautogui.prompt(<span class="string">&#x27;请输入一个数字：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = pyautogui.prompt(<span class="string">&#x27;请输入一个数字：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pyautogui.write(<span class="string">&#x27;Hello world!&#x27;</span>, interval=<span class="number">0.25</span>)   <span class="comment"># 主要(输入第一个参数的值)</span></span><br><span class="line"></span><br><span class="line">pyautogui.keyDown() ： 模拟按键按下；</span><br><span class="line">pyautogui.keyUp() ： 模拟按键释放；</span><br><span class="line">pyautogui.press() ： <span class="comment"># 就是调用keyDown() &amp; keyUp(),模拟一次按键；</span></span><br><span class="line">pyautogui.typewrite(<span class="string">&#x27;this&#x27;</span>,<span class="number">0.5</span>) ： 第一参数是输入内容，第二个参数是每个字符间的间隔时间；</span><br><span class="line">pyautogui.typewrite([<span class="string">&#x27;T&#x27;</span>,<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;s&#x27;</span>])：typewrite 还可以传入单字母的列表；</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pyautogui</span><br><span class="line"></span><br><span class="line"><span class="comment"># 截取指定区域的屏幕截图</span></span><br><span class="line">left, top, width, height = <span class="number">100</span>, <span class="number">100</span>, <span class="number">200</span>, <span class="number">200</span></span><br><span class="line">screenshot = pyautogui.screenshot(region=(left, top, width, height))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存截图</span></span><br><span class="line">screenshot.save(<span class="string">&#x27;screenshot.png&#x27;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pyautogui</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取当前鼠标的坐标</span></span><br><span class="line">x, y = pyautogui.position()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印鼠标坐标</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;鼠标坐标：&#x27;</span>, x, y)</span><br></pre></td></tr></table></figure>

<h2 id="cnocr识别图片中文"><a href="#cnocr识别图片中文" class="headerlink" title="cnocr识别图片中文"></a>cnocr识别图片中文</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> cnocr <span class="keyword">import</span> CnOcr</span><br><span class="line">ocr = CnOcr()</span><br><span class="line">res = ocr.ocr(<span class="string">&#x27;test.png&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Predicted Chars:&quot;</span>, res)</span><br></pre></td></tr></table></figure>

<h2 id="pytesseract识别图片英文"><a href="#pytesseract识别图片英文" class="headerlink" title="pytesseract识别图片英文"></a>pytesseract识别图片英文</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pytesseract</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">image = Image.<span class="built_in">open</span>(<span class="string">&#x27;test.png&#x27;</span>)</span><br><span class="line">code = pytesseract.image_to_string(image, lang=<span class="string">&#x27;eng&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(code)</span><br></pre></td></tr></table></figure>

<h2 id="easyocr"><a href="#easyocr" class="headerlink" title="easyocr"></a>easyocr</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> easyocr</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置识别中英文两种语言</span></span><br><span class="line">reader = easyocr.Reader([<span class="string">&#x27;ch_sim&#x27;</span>,<span class="string">&#x27;en&#x27;</span>], gpu = <span class="literal">False</span>) <span class="comment"># need to run only once to load model into memory</span></span><br><span class="line">result = reader.readtext(<span class="string">r&quot;d:\Desktop\4A34A16F-6B12-4ffc-88C6-FC86E4DF6912.png&quot;</span>, detail = <span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>学习</category>
        <category>编程</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>网络</tag>
        <tag>计算机</tag>
        <tag>备忘</tag>
        <tag>Python</tag>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title>如何关闭VScode_Git工具</title>
    <url>/2023-7/%E5%A6%82%E4%BD%95%E5%85%B3%E9%97%ADvscode-git%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<blockquote>
<p>vscode会自动开启git，但有时候我们并不需要git工具。</p>
</blockquote>
<span id="more"></span>

<blockquote>
<p><a href="https://blog.csdn.net/weixin_44061131/article/details/104946763">https://blog.csdn.net/weixin_44061131/article/details/104946763</a></p>
</blockquote>
<h2 id="如何关闭VS-code工具的git提示"><a href="#如何关闭VS-code工具的git提示" class="headerlink" title="如何关闭VS code工具的git提示"></a>如何关闭VS code工具的git提示</h2><p><strong>只需要关闭用户设置里的Git:Enabled即可;</strong></p>
<h3 id="第一步，我们只需要打开”文件-首选项-设置”"><a href="#第一步，我们只需要打开”文件-首选项-设置”" class="headerlink" title="第一步，我们只需要打开”文件-&gt;首选项-&gt;设置”"></a>第一步，我们只需要打开”文件-&gt;首选项-&gt;设置”</h3><p><img src="/../../images/e8aa16b14369cb0c469d41a0fece4987a901c5d2243ec5711962b92d62874312.png" alt="图 1">  </p>
<h3 id="第二步，在搜索栏中搜索git-Enabled-关闭即可"><a href="#第二步，在搜索栏中搜索git-Enabled-关闭即可" class="headerlink" title="第二步，在搜索栏中搜索git:Enabled,关闭即可;"></a>第二步，在搜索栏中搜索git:Enabled,关闭即可;</h3><p><img src="/../../images/c4b35a081eaa3d1f366d9fea2005ed5c901689863a81a3719a5ae5db7455ac5c.png" alt="图 2">  </p>
]]></content>
      <categories>
        <category>学习</category>
        <category>软件</category>
        <category>VScode</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>转载</tag>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title>如何正确复制CSDN文章到自己的博客</title>
    <url>/2023-7/%E5%A6%82%E4%BD%95%E6%AD%A3%E7%A1%AE%E5%A4%8D%E5%88%B6CSDN%E6%96%87%E7%AB%A0%E5%88%B0%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<blockquote>
<p>解决了博客内容不够多的问题</p>
</blockquote>
<span id="more"></span>

<blockquote>
<p><a href="https://blog.csdn.net/belongtocode/article/details/104235007">https://blog.csdn.net/belongtocode/article/details/104235007</a></p>
</blockquote>
<ol>
<li><p>CSDN博客中有很多优秀的文章，为了便于之后浏览，习惯复制到自己的博客收藏。</p>
<p>怎样直接复制粘贴全文？解决方法参考：<a href="https://jingyan.baidu.com/article/0964eca24e159c8285f53618.html">https://jingyan.baidu.com/article/0964eca24e159c8285f53618.html</a></p>
<ol>
<li>csdn 文章页面，打开浏览器开发者工具</li>
<li>找到文章正文对应的 html 元素 （含 “article_content”标签头）<br><img src="/../../images/20200209143556875-1690290830477.png" alt="在这里插入图片描述"></li>
<li>在该元素源代码上右键 “Copy”-&gt;“Copy element”</li>
</ol>
<p><img src="/../../images/20200209143712980-1690290830480.png" alt="在这里插入图片描述"><br><strong>接下来这一步最重要</strong><br><strong>接下来这一步最重要</strong><br><strong>接下来这一步最重要</strong><br><strong>很多教程都是直接复制这个到自己的博客编辑器！！！这样会发现很多格式不一致，反正不是自己想要的效果</strong></p>
<ol>
<li>新建一个 txt 文件，将后缀改为 .html ，把刚复制的 源代码 粘贴到文件中，浏览器打开后如下图，此时复制全文到markdown的软件<a href="https://www.typora.io/">Typora</a>中（这是我自己平常使用的编写markdown的软件，推荐使用！！！）然后再复制到CSDN的markdown编辑器即可<br><img src="/../../images/20200209143951840.png" alt="在这里插入图片描述"><br><img src="/../../images/20200209144232789.png" alt="在这里插入图片描述"></li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>学习</category>
        <category>网络</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>转载</tag>
        <tag>CSDN</tag>
      </tags>
  </entry>
  <entry>
    <title>《完美主义扼杀效率》摘要</title>
    <url>/2023-7/%E5%AE%8C%E7%BE%8E%E4%B8%BB%E4%B9%89%E6%89%BC%E6%9D%80%E6%95%88%E7%8E%87%E6%91%98%E8%A6%81/</url>
    <content><![CDATA[<h2 id="第1章-短时高效地完成工作"><a href="#第1章-短时高效地完成工作" class="headerlink" title="第1章 短时高效地完成工作"></a>第1章 短时高效地完成工作</h2><h3 id="01"><a href="#01" class="headerlink" title="01"></a>01</h3><p>实践</p>
<p>①　善于思考如何能在最短的时间里拿出成果。</p>
<p>②　与时效主义者共事。</p>
<h3 id="02"><a href="#02" class="headerlink" title="02"></a>02</h3><p>日本队要在6小时的练习时间内用完所有力气，所以从某种意义上来说，单位时间内的专注力是很低的。</p>
<p>实践</p>
<p>①　限制工作时间。</p>
<p>②　提高专注力的精度。</p>
<h3 id="03"><a href="#03" class="headerlink" title="03"></a>03</h3><p>实践</p>
<p>①　不拘泥于形式，在快速高效完成上下功夫。</p>
<p>②　从风险低的工作开始做起。</p>
<h3 id="04"><a href="#04" class="headerlink" title="04"></a>04</h3><p>如果能够灵活运用“deadline效应”，激发自己的极限潜能，就能找到在限定的时间范围内完成工作的办法。</p>
<p>实践</p>
<p>①　特意设定一个更早一些的截止日期。</p>
<p>②　越是时间紧迫，越要静下心来计划。</p>
<h3 id="05"><a href="#05" class="headerlink" title="05"></a>05</h3><p>反观时效主义者，他们会做好每一星期、每一天的工作计划，然后再专注于眼前的工作。</p>
<p><img src="/../../images/image-klgz.png" alt="img"><img src="/../../images/image-pxva.png" alt="img"></p>
<h3 id="06"><a href="#06" class="headerlink" title="06"></a>06</h3><p>实践</p>
<p>①　减少焦虑，消除不安。</p>
<p>②　提高只集中于某一个点的注意力。</p>
<h3 id="07"><a href="#07" class="headerlink" title="07"></a>07</h3><p>实践</p>
<p>①　固定的日常工作，就想办法省时省力地完成。</p>
<p>②　从同事身上或书本中学习高效应对琐事的智慧。</p>
<h3 id="09"><a href="#09" class="headerlink" title="09"></a>09</h3><p>加班频次少、效率高的人，大多都擅长巧妙利用零碎时间。</p>
<p><img src="/../../images/image-oask.png" alt="img"><img src="/../../images/image-qdyp.png" alt="img">实践</p>
<p>①　统计自己有多少零碎时间。</p>
<p>②　把等候时间、乘车时间与工作任务联系起来。</p>
<h3 id="10"><a href="#10" class="headerlink" title="10"></a>10</h3><p>以写报告为例，完美主义者首先会在脑海中想象出一幅已经完成报告的画面。如此一来，就会联想到自己并不擅长的写作、错字漏字的确认核对以及领导的全面否定等，越想越没有动手的积极性。</p>
<p>反观时效主义者，他们的思路是一点点累积，只要最后写完了就行，所以能够将最开始的一步化解为最小单位，然后立刻行动。</p>
<p>实践</p>
<p>①　拆解工作任务。</p>
<p>②　似婴儿学步般迈出第一步。</p>
<h2 id="第2章-通过“高效可行的准备”提高成果"><a href="#第2章-通过“高效可行的准备”提高成果" class="headerlink" title="第2章 通过“高效可行的准备”提高成果"></a>第2章 通过“高效可行的准备”提高成果</h2><h3 id="11"><a href="#11" class="headerlink" title="11"></a>11</h3><p>很明显，靠自己一个人的力量去完成所有的事是不可能的，所以决定借助他人的力量。</p>
<p>克制想要自己独自按照起初计划完成所有工作的冲动，懂得只有妥协才能让问题圆满解决。</p>
<p>实践</p>
<p>①　根据突发状况，找出什么地方可以妥协让步。</p>
<p>②　思考如何才能在有限的时间内，最大限度地满足对方的诉求。</p>
<h3 id="12"><a href="#12" class="headerlink" title="12"></a>12</h3><p>想必大家在上中学时，都参加过期中、期末考试吧。那个时候，你的学习方法更接近于以下哪一种呢？</p>
<p>●　从头到尾按顺序学习考试范围内的所有内容</p>
<p>●　集中精力学习考试中极有可能出现的考点。</p>
<p>追求完美的我曾经是第一种</p>
<p>但是，正所谓鱼和熊掌不可兼得，无论是人生还是职场，一旦想要把自己想做的事、应该做的事全部做好或者全部做完，最终只会两手皆空，很难在有限的时间内收获成果。</p>
<p>实践</p>
<p>①　准确把握最关键的20%。</p>
<p>②　在做好思想准备的基础上对剩余部分做出某种程度的牺牲。</p>
<h3 id="13"><a href="#13" class="headerlink" title="13"></a>13</h3><p>招待的目的是让客户开心。你的过度关心，反倒会让对方感到不自在，还怎么开心？</p>
<p><img src="/../../images/image-fkak.png" alt="img"><img src="/../../images/image-psaj.png" alt="img"></p>
<p>实践</p>
<p>①　思考目的、本质。</p>
<p>②　换位思考。</p>
<h3 id="14"><a href="#14" class="headerlink" title="14"></a>14</h3><p><img src="/../../images/image-gubv.png" alt="img"><img src="/../../images/image-ndge.png" alt="img">15</p>
<p><img src="/../../images/image-izhx.png" alt="img"><img src="/../../images/image-phxx.png" alt="img">实践</p>
<p>①　从工作成绩优异的人那里取经。</p>
<p>②　彻底改变做法，思考具有创造性的新方法。</p>
<h3 id="16"><a href="#16" class="headerlink" title="16"></a>16</h3><p>不执着于弥补短板</p>
<p>时效主义者大多都擅长发挥自己的优势。</p>
<p>实践</p>
<p>①　发现自己的优势、长处。</p>
<p>②　思考、制定能够发挥自己优势的成长攻略。</p>
<h3 id="17"><a href="#17" class="headerlink" title="17"></a>17</h3><p>实践</p>
<p>①　时刻研究新方法。</p>
<p>②　每天做出一个新的改善。</p>
<p><img src="/../../images/image-etit.png" alt="img"></p>
<h2 id="第3章-不畏惧失败，敢于行动"><a href="#第3章-不畏惧失败，敢于行动" class="headerlink" title="第3章 不畏惧失败，敢于行动"></a>第3章 不畏惧失败，敢于行动</h2><h3 id="18"><a href="#18" class="headerlink" title="18"></a>18</h3><p>实践</p>
<p>①　首先下定决心，然后列出行动计划。</p>
<p>②　先尝试性地行动，然后再动真格的。</p>
<h3 id="19"><a href="#19" class="headerlink" title="19"></a>19</h3><p>不要追求一次就达到完美状态，习惯先做草案</p>
<h3 id="20"><a href="#20" class="headerlink" title="20"></a>20</h3><p>时效主义者从不在某一件事上追求100%的完美，他们的思维模式是在接受失败的同时，会反复尝试各种方法，整体上顺利推进即可。</p>
<h3 id="21"><a href="#21" class="headerlink" title="21"></a>21</h3><p>周围那些取得成功的人，哪怕只是一毫米的进步，也会为之欣喜，会沉下心来直面收获前的“失望期”，一门心思努力向前走。</p>
<h3 id="22"><a href="#22" class="headerlink" title="22"></a>22</h3><p>时效主义者，可以将注意力集中在自己能做的事情上，不会去思考那些自己无法把控的事情。</p>
<h3 id="23"><a href="#23" class="headerlink" title="23"></a>23</h3><p><img src="/../../images/image-kxqm.png" alt="img"><img src="/../../images/image-xxys.png" alt="img"></p>
<h2 id="第4章-创造“精神上富裕”"><a href="#第4章-创造“精神上富裕”" class="headerlink" title="第4章 创造“精神上富裕”"></a>第4章 创造“精神上富裕”</h2><h3 id="24"><a href="#24" class="headerlink" title="24"></a>24</h3><p>可以游刃有余地消遣的时间，并非自动产生，而是主动创造出来的吧。</p>
<h3 id="25"><a href="#25" class="headerlink" title="25"></a>25</h3><p>没能坚持自己的计划后</p>
<p>完美主义者：自我否定，自我厌恶，半途而废</p>
<p>时效主义者：更换方法，柔性调整，坚持到底</p>
<h3 id="26"><a href="#26" class="headerlink" title="26"></a>26</h3><p>问题已经发生了，只有专心消除故障了</p>
<p>有时间感伤，倒不如思考自己能做些什么。</p>
<h3 id="27"><a href="#27" class="headerlink" title="27"></a>27</h3><p>时效主义者会基于旅游最原始的目的——放松心情和体验非日常的生活，灵活调整旅行计划，收获其中的快乐。</p>
<h3 id="28"><a href="#28" class="headerlink" title="28"></a>28</h3><p>实践</p>
<p>①　量化满意度，找出灰色地带。</p>
<p>②哪怕是很小的收获，也要为自己的成长而欣喜。</p>
<h3 id="29"><a href="#29" class="headerlink" title="29"></a>29</h3><p>不要为了不时之需而囤积物品，多余的东西就主动“断舍离”</p>
<p><img src="/../../images/7f38ea07d7f603ef934daf5bf32e19a549357fa08499d76b34fea6574e965fe8.png" alt="图 0">  </p>
<p><img src="/../../images/72bd0b7da0849a8c61831e461a5f886a5c8bc58130f3144040dc3771d735186e.png" alt="图 1">  </p>
<h2 id="第5章-巧妙利用“他人的力量”"><a href="#第5章-巧妙利用“他人的力量”" class="headerlink" title="第5章 巧妙利用“他人的力量”"></a>第5章 巧妙利用“他人的力量”</h2><h3 id="30"><a href="#30" class="headerlink" title="30"></a>30</h3><p>实践</p>
<p>①　区分哪些错误应该指责、哪些错误可以容忍。</p>
<p>②　不拿对自己的高要求去衡量别人。</p>
<h3 id="31"><a href="#31" class="headerlink" title="31"></a>31</h3><p>不要面玲珑，试图讨好所有人，要从一部分人那里获得绝对的支持</p>
<h3 id="32"><a href="#32" class="headerlink" title="32"></a>32</h3><p>不要让大家产生“越级了”或“自己被忽视了”的不适感是非常重要的。</p>
<p>实践</p>
<p>①　看清谁是核心人物。</p>
<p>②　与核心人物搞好关系。</p>
<h3 id="33"><a href="#33" class="headerlink" title="33"></a>33</h3><p>要想收获大的成果就必须把一些无关痛痒的小事交给别人，让自己能够专注于更有价值的工作。</p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>工作效率和效果，是会被思维和行为习惯的结果左右的。</p>
<p>所以，哪怕只是一个很小的习惯，也请你将它落实在每天的生活中。</p>
]]></content>
      <categories>
        <category>日常</category>
        <category>读书</category>
      </categories>
      <tags>
        <tag>隐藏</tag>
        <tag>读书</tag>
        <tag>日常</tag>
        <tag>方法论</tag>
        <tag>备忘</tag>
      </tags>
  </entry>
  <entry>
    <title>曾给儿子传授“为官之道”</title>
    <url>/2023-7/%E6%9B%BE%E7%BB%99%E5%84%BF%E5%AD%90%E4%BC%A0%E6%8E%88%E2%80%9C%E4%B8%BA%E5%AE%98%E4%B9%8B%E9%81%93%E2%80%9D/</url>
    <content><![CDATA[<p><img src="/../../images/v2-1a1569d1d8b9b7d32823710c70862e0a_720w.webp" alt="img"></p>
<blockquote>
<p><a href="https://zhuanlan.zhihu.com/p/50676958">https://zhuanlan.zhihu.com/p/50676958</a></p>
</blockquote>
<h2 id="曾给儿子传授“为官之道”，称做官就是为了利益"><a href="#曾给儿子传授“为官之道”，称做官就是为了利益" class="headerlink" title="曾给儿子传授“为官之道”，称做官就是为了利益**"></a>曾给儿子传授“为官之道”，称做官就是为了利益**</h2><p>就是这样一位完全称得上“贪得无厌，荒淫无耻”的官员，居然还<strong>曾在给儿子的家书中传授“为官之道”，大谈其“三观看透”。真不敢想象在这样父亲的教导之下，他的儿子会是怎样的一个人。</strong></p>
<p>虽然这封“写给儿子的信”是不是徐其耀亲手所写已无从查证，但结合他的“光辉事迹”，该信中的每一点，他几乎都具备，<strong>或者说每一个“大贪官”都具备这样的“价值观”。</strong></p>
<p><strong>以下为徐其耀向儿子传授“为官之道”原文：</strong></p>
<p><strong>孩子：</strong></p>
<p>你的来信我已收到，对你在大学里的表现，我很欣慰。</p>
<p>你要再接再厉。既然你选择了一定要走仕途这条路，你就一定要把我下面的劝告铭记在心：</p>
<p><strong>1.不要追求真理，不要探询事物的本来面目</strong></p>
<p>把探索真理这类事情让知识分子去做吧，这是他们的事情。要牢牢记住这样的信条：对自己有利的，就是正确的。</p>
<p>实在把握不了，可简化为：上级领导提倡的就是正确的。</p>
<p><strong>2.不但要学会说假话，更要善于说假话</strong></p>
<p>要把说假话当成一个习惯，不，当成事业，说到自己也相信的程度。妓女和做官是最相似的职业，只不过做官出卖的是嘴。</p>
<p>记住，做官以后你的嘴不仅仅属于你自己的，说什么要根据需要。</p>
<p><strong>3.要有文凭，但不要真有知识，真有知识会害了你</strong></p>
<p>有了知识你就会独立思考，而独立思考是从政的大忌。别看现在的领导都是硕士博士，那都是假的。</p>
<p>有的人博士毕业就去应招公务员走向仕途，那是他从读书的那天起就没想研究学问，肯定不学无术。</p>
<p>记住，真博士是永远做不了官的。</p>
<p><strong>4. 做官的目的是什么？是利益</strong></p>
<p>要不知疲倦地攫取各种利益。有人现在把这叫腐败。你不但要明确的把攫取各种利益作为当官的目的，而且要作为唯一的目的。</p>
<p>你的领导提拔你，是因为你能给他带来利益；你的下属服从你，是因为你能给他带来利益；你周围的同僚朋友关照你，是因为你能给他带来利益。你自己可以不要，但别人的你必须给。</p>
<p>记住，攫取利益这个目的一模糊，你就离失败不远了。</p>
<p><strong>5.必须把会做人放在首位，然后才是会做事</strong></p>
<p>这里的做人做事你可别理解为德才兼备的意思。这里说的做人，就是处关系。做事是实际工作，这点会不会都无所谓。做人就是把自己作为一个点编织到上下左右的网中，成为这个网的一部分。</p>
<p>记住，现在说谁工作能力强，一点都不是说他做事能力强，而是指做人能力强。</p>
<p>呵呵，你看那些把能力理解为做事的人，有好日子过才怪。</p>
<p><strong>6.我们的社会无论外表怎样变化，其实质都是农民社会</strong></p>
<p>谁迎合了农民谁就会成功。我们周围的人无论外表是什么，骨子里都是农民。农民的特点是目光短浅，注重眼前利益。</p>
<p>所以你做事的方式方法必须具有农民特点，要搞短期效益，要鼠目寸光。一旦你把眼光放远，你就不属于这个群体了，后果可想而知。</p>
<p>要多学习封建的那一套，比如拜个把兄弟什么的，这都不过分。</p>
<p><strong>7.要相信拍马是一种高级艺术</strong></p>
<p>千万不要以为拍马只要豁出脸皮就行，豁得出去的女人多了，可傍上大款的或把自己卖个好价钱的是极少数，大部分还是做了低层的三陪小姐。</p>
<p>这和拍马是一样的道理。拍马就是为了得到上级的赏识。</p>
<p>在人治的社会里，上级的赏识是升官的唯一途径，别的都是形式，这一点不可不察。</p>
<p><strong>8.所有的法律法规、政策制度都不是必须严格遵守的，确切地说，执行起来都是可以变通的</strong></p>
<p>法律法规、政策制度的制订者从没想到要用这些来约束自己，而是想约束他人。</p>
<p>但你要知道，这些不是人人都可以违反的。什么时候坚决遵守，什么时候偷偷违反，让谁违反，要审势而定，否则宽严皆误。</p>
<p>孩子，以上这些都是做官的原则。现在要仔细想想，如果你真能逐条做到，你就能一帆风顺， 如果感觉力不从心，就马上另外选择职业吧。</p>
]]></content>
      <categories>
        <category>日常</category>
        <category>信息</category>
      </categories>
      <tags>
        <tag>转载</tag>
      </tags>
  </entry>
  <entry>
    <title>网站搭建学习笔记</title>
    <url>/2023-7/%E7%BD%91%E7%AB%99%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="1-环境搭建"><a href="#1-环境搭建" class="headerlink" title="1.环境搭建"></a>1.环境搭建</h2><h3 id="ubuntu配置"><a href="#ubuntu配置" class="headerlink" title="ubuntu配置"></a>ubuntu配置</h3><h4 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h4><h6 id="配置清华源"><a href="#配置清华源" class="headerlink" title="配置清华源"></a>配置清华源</h6><p>上网搜到ubuntu清华源官网有教程</p>
<h6 id="配置root密码"><a href="#配置root密码" class="headerlink" title="配置root密码"></a>配置root密码</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo passwd root</span><br></pre></td></tr></table></figure>

<h6 id="新建账号"><a href="#新建账号" class="headerlink" title="新建账号"></a>新建账号</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo adduser username</span><br></pre></td></tr></table></figure>

<h6 id="安装简体中文支持包并设置为中文"><a href="#安装简体中文支持包并设置为中文" class="headerlink" title="安装简体中文支持包并设置为中文"></a>安装简体中文支持包并设置为中文</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get install language-pack-zh-hans language-pack-zh-hans-base</span><br><span class="line">sudo update-locale LANG=zh_CN.UTF-8</span><br></pre></td></tr></table></figure>

<h6 id="安装ssh"><a href="#安装ssh" class="headerlink" title="安装ssh"></a>安装ssh</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get update </span><br><span class="line">sudo apt-get install openssh-server</span><br></pre></td></tr></table></figure>

<h6 id="启用ssh"><a href="#启用ssh" class="headerlink" title="启用ssh"></a>启用ssh</h6><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">sudo service ssh start</span><br><span class="line">sudo systemctl enable ssh.service <span class="comment">//开机自启动</span></span><br><span class="line">sudo systemctl restart ssh</span><br></pre></td></tr></table></figure>

<h6 id="查看服务情况"><a href="#查看服务情况" class="headerlink" title="查看服务情况"></a>查看服务情况</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo service ssh status</span><br></pre></td></tr></table></figure>

<h6 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install nginx</span><br></pre></td></tr></table></figure>

<h6 id=""><a href="#" class="headerlink" title=""></a></h6><h4 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h4><h6 id="将域名指向主机"><a href="#将域名指向主机" class="headerlink" title="将域名指向主机"></a>将域名指向主机</h6><p>编辑文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/hosts</span><br></pre></td></tr></table></figure>

<p>添加一行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1    ubuntuzcj.com    www.ubuntuzcj.com</span><br></pre></td></tr></table></figure>

<p>需要重启networking！！！</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">service NetworkManager restart</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>学习</category>
        <category>网络</category>
        <category>建站</category>
      </categories>
      <tags>
        <tag>网络</tag>
        <tag>网站</tag>
        <tag>计算机</tag>
        <tag>备忘</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>优化VSCode：让你的VSCode变得好用又美观</title>
    <url>/2023-7/%E9%85%8D%E7%BD%AEvscode/</url>
    <content><![CDATA[<blockquote>
<p>万字长文！打造最顺手的<a href="https://so.csdn.net/so/search?q=vscode&spm=1001.2101.3001.7020">vscode</a>！</p>
</blockquote>
<span id="more"></span>

<blockquote>
<p><a href="https://blog.csdn.net/Cykinter/article/details/113792738">https://blog.csdn.net/Cykinter/article/details/113792738</a></p>
</blockquote>
<p>不多废话，开整！</p>
<h3 id="文章目录"><a href="#文章目录" class="headerlink" title="文章目录"></a>文章目录</h3><ul>
<li><a href="#%E6%8F%90%E7%A4%BA">提示</a></li>
<li><a href="#%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE">基本设置</a></li>
<li><a href="#%E5%A5%BD%E7%94%A8%E7%9A%84%E6%8F%92%E4%BB%B6%E5%8F%8A%E5%85%B6%E7%9B%B8%E5%85%B3%E8%AE%BE%E7%BD%AE">好用的插件及其相关设置</a><ul>
<li><a href="#%E9%80%9A%E7%94%A8">通用</a><ul>
<li><a href="#chinese-simplified-language-pack-for-visual-studio-code%E5%BF%85%E4%B8%8D%E5%8F%AF%E5%B0%91%E7%9A%84%E4%B8%AD%E6%96%87%E6%8F%92%E4%BB%B6">Chinese (Simplified) Language Pack for Visual Studio Code：必不可少的中文插件</a></li>
<li><a href="#%E9%A9%BC%E5%B3%B0%E7%BF%BB%E8%AF%91%E5%8A%A9%E6%89%8B%E4%B8%8D%E5%86%8D%E8%AE%A9%E5%8F%96%E5%8F%98%E9%87%8F%E5%90%8D%E6%88%90%E4%B8%BA%E4%B8%80%E4%BB%B6%E9%9A%BE%E4%BA%8B">驼峰翻译助手：不再让取变量名成为一件难事</a></li>
<li><a href="#error-lens%E5%9C%A8%E8%A1%8C%E5%86%85%E7%AA%81%E5%87%BA%E6%98%BE%E7%A4%BA%E4%BB%A3%E7%A0%81errorwarning">Error Lens：在行内突出显示代码ERROR&#x2F;WARNING</a></li>
<li><a href="#bracket-pair-colorizer-2%E7%BE%8E%E8%A7%82%E7%9A%84%E5%BD%A9%E8%99%B9%E6%8B%AC%E5%8F%B7%E8%AE%A9%E4%BD%A0%E4%B8%8D%E5%86%8D%E4%B8%BA%E7%B9%81%E6%9D%82%E7%9A%84%E6%8B%AC%E5%8F%B7%E7%83%A6%E6%81%BC">Bracket Pair Colorizer 2：美观的彩虹括号，让你不再为繁杂的括号烦恼</a></li>
<li><a href="#code-runner%E4%BB%A5%E6%9C%80%E7%AE%80%E6%B4%81%E7%9A%84%E6%96%B9%E5%BC%8F%E8%BF%90%E8%A1%8C%E4%BB%BB%E4%BD%95%E4%BB%A3%E7%A0%81">Code Runner：以最简洁的方式运行任何代码</a></li>
<li><a href="#polacode-fixed-edition%E5%88%86%E4%BA%AB%E6%9B%B4%E6%BC%82%E4%BA%AE%E7%9A%84%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5">Polacode (fixed edition)：分享更漂亮的代码片段</a></li>
<li><a href="#todo-highlight%E9%AB%98%E4%BA%AE%E4%BD%A0%E7%9A%84todo">TODO Highlight：高亮你的TODO</a></li>
<li><a href="#vs-code-counter%E7%BB%9F%E8%AE%A1%E4%BB%A3%E7%A0%81%E8%A1%8C%E6%95%B0">VS Code Counter：统计代码行数</a></li>
</ul>
</li>
<li><a href="#%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91">前端开发</a><ul>
<li><a href="#css-navigation%E5%BF%AB%E9%80%9F%E8%B7%B3%E8%BD%AC%E5%88%B0css%E7%9A%84%E7%B1%BB%E5%AE%9A%E4%B9%89">CSS Navigation：快速跳转到CSS的类定义</a></li>
<li><a href="#css-auto-prefix%E5%86%99css%E6%97%B6%E4%B8%8D%E5%86%8D%E4%B8%BA%E6%B5%8F%E8%A7%88%E5%99%A8%E5%89%8D%E7%BC%80%E5%8F%91%E6%84%81">css-auto-prefix：写CSS时不再为浏览器前缀发愁</a></li>
<li><a href="#image-preview%E5%BF%AB%E9%80%9F%E9%A2%84%E8%A7%88html%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87">Image Preview：快速预览HTML中的图片</a></li>
<li><a href="#intellisense-for-css-class-names-in-html%E8%87%AA%E5%8A%A8%E8%A1%A5%E5%85%A8css%E7%B1%BB%E5%90%8D">IntelliSense for CSS class names in HTML：自动补全CSS类名</a></li>
<li><a href="#js-css-html-formatter%E6%A0%BC%E5%BC%8F%E5%8C%96jscsshtml%E6%96%87%E4%BB%B6">JS-CSS-HTML Formatter：格式化js、css、html文件</a></li>
<li><a href="#live-server%E5%AE%9E%E6%97%B6%E5%9C%B0%E4%BD%BF%E7%94%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E9%A2%84%E8%A7%88%E4%BD%A0%E7%9A%84%E5%89%8D%E7%AB%AF%E9%A1%B5%E9%9D%A2">Live Server：实时地使用浏览器预览你的前端页面</a></li>
<li><a href="#open-in-browser%E4%BB%8Evscode%E6%89%93%E5%BC%80%E6%B5%8F%E8%A7%88%E5%99%A8%E4%BB%A5%E9%A2%84%E8%A7%88%E5%89%8D%E7%AB%AF%E9%A1%B5%E9%9D%A2">open in browser：从vscode打开浏览器以预览前端页面</a></li>
<li><a href="#path-intellisense%E6%99%BA%E8%83%BD%E8%A1%A5%E5%85%A8%E8%B7%AF%E5%BE%84">Path Intellisense：智能补全路径</a></li>
</ul>
</li>
<li><a href="#%E6%91%B8%E9%B1%BC">摸鱼</a><ul>
<li><a href="#epub-reader%E6%91%B8%E9%B1%BC%E5%BF%85%E5%A4%87vscode%E7%9C%8B%E5%B0%8F%E8%AF%B4%E6%94%AF%E6%8C%81epub">epub reader：摸鱼必备！vscode看小说！支持epub！</a></li>
</ul>
</li>
<li><a href="#%E5%86%99%E4%BD%9C">写作</a><ul>
<li><a href="#%E4%B8%AD%E6%96%87%E5%BC%95%E5%8F%B7%E4%BF%AE%E6%AD%A3%E8%A7%A3%E5%86%B3%E5%86%99%E4%BD%9C%E6%97%B6%E7%9A%84%E5%B0%8F%E6%AF%9B%E7%97%85">中文引号修正：解决写作时的小毛病</a></li>
<li><a href="#markdown-all-in-one%E4%B9%A6%E5%86%99markdown%E5%88%A9%E5%99%A8">Markdown All in One：书写Markdown利器</a></li>
<li><a href="#word-count-cjk%E5%86%99%E4%BD%9C%E5%BF%85%E5%A4%87%E7%9A%84%E5%AD%97%E6%95%B0%E7%BB%9F%E8%AE%A1%E6%8F%92%E4%BB%B6">Word Count CJK：写作必备的字数统计插件</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#%E4%B8%BB%E9%A2%98">主题</a></li>
</ul>
<h1 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h1><p>截止到2021&#x2F;5&#x2F;9下午5点10分时，最新版VSCode为1.56.0版本，本文针对该版本创作，请版本低于此版本的读者先更新一下自己的VSCode。</p>
<h1 id="基本设置"><a href="#基本设置" class="headerlink" title="基本设置"></a>基本设置</h1><p>以下是<code>setting.json</code>的基本内容，可以优化vscode写代码体验，设置项的意义已经注释：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">/*editor*/</span></span><br><span class="line">    <span class="attr">&quot;editor.cursorBlinking&quot;</span><span class="punctuation">:</span> <span class="string">&quot;smooth&quot;</span><span class="punctuation">,</span><span class="comment">//使编辑器光标的闪烁平滑，有呼吸感</span></span><br><span class="line">    <span class="attr">&quot;editor.formatOnPaste&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span><span class="comment">//在粘贴时格式化代码</span></span><br><span class="line">    <span class="attr">&quot;editor.formatOnType&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span><span class="comment">//敲完一行代码自动格式化</span></span><br><span class="line">    <span class="attr">&quot;editor.smoothScrolling&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span><span class="comment">//使编辑器滚动变平滑</span></span><br><span class="line">    <span class="attr">&quot;editor.tabCompletion&quot;</span><span class="punctuation">:</span> <span class="string">&quot;on&quot;</span><span class="punctuation">,</span><span class="comment">//启用Tab补全</span></span><br><span class="line">    <span class="attr">&quot;editor.fontFamily&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&#x27;Jetbrains Mono&#x27;, &#x27;思源黑体&#x27;&quot;</span><span class="punctuation">,</span><span class="comment">//字体设置，个人喜欢Jetbrains Mono作英文字体，思源黑体作中文字体</span></span><br><span class="line">    <span class="attr">&quot;editor.fontLigatures&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span><span class="comment">//启用字体连字</span></span><br><span class="line">    <span class="attr">&quot;editor.detectIndentation&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span><span class="comment">//不基于文件内容选择缩进用制表符还是空格</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    因为有时候VSCode的判断是错误的</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="attr">&quot;editor.insertSpaces&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span><span class="comment">//敲下Tab键时插入4个空格而不是制表符</span></span><br><span class="line">    <span class="attr">&quot;editor.copyWithSyntaxHighlighting&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span><span class="comment">//复制代码时复制纯文本而不是连语法高亮都复制了</span></span><br><span class="line">    <span class="attr">&quot;editor.suggest.snippetsPreventQuickSuggestions&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span><span class="comment">//这个开不开效果好像都一样，据说是因为一个bug，建议关掉</span></span><br><span class="line">    <span class="attr">&quot;editor.stickyTabStops&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span><span class="comment">//在缩进上移动光标时四个空格一组来移动，就仿佛它们是制表符(\t)一样</span></span><br><span class="line">    <span class="attr">&quot;editor.wordBasedSuggestions&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span><span class="comment">//关闭基于文件中单词来联想的功能（语言自带的联想就够了，开了这个会导致用vscode写MarkDown时的中文引号异常联想）</span></span><br><span class="line">    <span class="attr">&quot;editor.linkedEditing&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span><span class="comment">//html标签自动重命名（喜大普奔！终于不需要Auto Rename Tag插件了！）</span></span><br><span class="line">    <span class="attr">&quot;editor.wordWrap&quot;</span><span class="punctuation">:</span> <span class="string">&quot;on&quot;</span><span class="punctuation">,</span><span class="comment">//在文件内容溢出vscode显示区域时自动折行</span></span><br><span class="line">    <span class="attr">&quot;editor.cursorSmoothCaretAnimation&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span><span class="comment">//让光标移动、插入变得平滑</span></span><br><span class="line">    <span class="attr">&quot;editor.renderControlCharacters&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span><span class="comment">//编辑器中显示不可见的控制字符</span></span><br><span class="line">    <span class="attr">&quot;editor.renderWhitespace&quot;</span><span class="punctuation">:</span> <span class="string">&quot;boundary&quot;</span><span class="punctuation">,</span><span class="comment">//除了两个单词之间用于分隔单词的一个空格，以一个小灰点的样子使空格可见</span></span><br><span class="line">    <span class="comment">/*terminal*/</span></span><br><span class="line">    <span class="attr">&quot;terminal.integrated.defaultProfile.windows&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Command Prompt&quot;</span><span class="punctuation">,</span><span class="comment">//将终端设为cmd，个人比较喜欢cmd作为终端</span></span><br><span class="line">    <span class="attr">&quot;terminal.integrated.cursorBlinking&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span><span class="comment">//终端光标闪烁</span></span><br><span class="line">    <span class="attr">&quot;terminal.integrated.rightClickBehavior&quot;</span><span class="punctuation">:</span> <span class="string">&quot;default&quot;</span><span class="punctuation">,</span><span class="comment">//在终端中右键时显示菜单而不是粘贴（个人喜好）</span></span><br><span class="line">    <span class="comment">/*files*/</span></span><br><span class="line">    <span class="attr">&quot;files.autoGuessEncoding&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span><span class="comment">//让VScode自动猜源代码文件的编码格式</span></span><br><span class="line">    <span class="attr">&quot;files.autoSave&quot;</span><span class="punctuation">:</span> <span class="string">&quot;onFocusChange&quot;</span><span class="punctuation">,</span><span class="comment">//在编辑器失去焦点时自动保存，这使自动保存近乎达到“无感知”的体验</span></span><br><span class="line">    <span class="attr">&quot;files.exclude&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="comment">//隐藏一些碍眼的文件夹</span></span><br><span class="line">        <span class="attr">&quot;**/.git&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;**/.svn&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;**/.hg&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;**/CVS&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;**/.DS_Store&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;**/tmp&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;**/node_modules&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;**/bower_components&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;files.watcherExclude&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="comment">//不索引一些不必要索引的大文件夹以减少内存和CPU消耗</span></span><br><span class="line">        <span class="attr">&quot;**/.git/objects/**&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;**/.git/subtree-cache/**&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;**/node_modules/**&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;**/tmp/**&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;**/bower_components/**&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;**/dist/**&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">/*workbench*/</span></span><br><span class="line">    <span class="attr">&quot;workbench.list.smoothScrolling&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span><span class="comment">//使文件列表滚动变平滑</span></span><br><span class="line">    <span class="attr">&quot;workbench.editor.enablePreview&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span><span class="comment">//打开文件时不是“预览”模式，即在编辑一个文件时打开编辑另一个文件不会覆盖当前编辑的文件而是新建一个标签页</span></span><br><span class="line">    <span class="attr">&quot;workbench.editor.wrapTabs&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span><span class="comment">//编辑器标签页在空间不足时以多行显示</span></span><br><span class="line">    <span class="attr">&quot;workbench.editor.untitled.hint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hidden&quot;</span><span class="punctuation">,</span><span class="comment">//隐藏新建无标题文件时的“选择语言？”提示（个人喜好，可以删掉此行然后Ctrl+N打开无标题新文件看看不hidden的效果）</span></span><br><span class="line">    <span class="comment">/*explorer*/</span></span><br><span class="line">    <span class="attr">&quot;explorer.confirmDelete&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span><span class="comment">//删除文件时不弹出确认弹窗（因为很烦）</span></span><br><span class="line">    <span class="attr">&quot;explorer.confirmDragAndDrop&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span><span class="comment">//往左边文件资源管理器拖动东西来移动/复制时不显示确认窗口（因为很烦）</span></span><br><span class="line">    <span class="comment">/*search*/</span></span><br><span class="line">    <span class="attr">&quot;search.followSymlinks&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span><span class="comment">//据说可以减少vscode的CPU和内存占用</span></span><br><span class="line">    <span class="comment">/*window*/</span></span><br><span class="line">    <span class="attr">&quot;window.menuBarVisibility&quot;</span><span class="punctuation">:</span> <span class="string">&quot;visible&quot;</span><span class="punctuation">,</span><span class="comment">//在全屏模式下仍然显示窗口顶部菜单（没有菜单很难受）</span></span><br><span class="line">    <span class="attr">&quot;window.dialogStyle&quot;</span><span class="punctuation">:</span> <span class="string">&quot;custom&quot;</span><span class="punctuation">,</span><span class="comment">//使用更具有VSCode的UI风格的弹窗提示（更美观）</span></span><br><span class="line">    <span class="comment">/*debug*/</span></span><br><span class="line">    <span class="attr">&quot;debug.internalConsoleOptions&quot;</span><span class="punctuation">:</span> <span class="string">&quot;openOnSessionStart&quot;</span><span class="punctuation">,</span><span class="comment">//每次调试都打开调试控制台，方便调试</span></span><br><span class="line">    <span class="attr">&quot;debug.showBreakpointsInOverviewRuler&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span><span class="comment">//在滚动条标尺上显示断点的位置，便于查找断点的位置</span></span><br><span class="line">    <span class="attr">&quot;debug.toolBarLocation&quot;</span><span class="punctuation">:</span> <span class="string">&quot;docked&quot;</span><span class="punctuation">,</span><span class="comment">//固定调试时工具条的位置，防止遮挡代码内容（个人喜好）</span></span><br><span class="line">    <span class="attr">&quot;debug.saveBeforeStart&quot;</span><span class="punctuation">:</span> <span class="string">&quot;nonUntitledEditorsInActiveGroup&quot;</span><span class="punctuation">,</span><span class="comment">//在启动调试会话前保存除了无标题文档以外的文档（毕竟你创建了无标题文档就说明你根本没有想保存它的意思（至少我是这样的。））</span></span><br><span class="line">    <span class="attr">&quot;debug.onTaskErrors&quot;</span><span class="punctuation">:</span> <span class="string">&quot;showErrors&quot;</span><span class="punctuation">,</span><span class="comment">//预启动任务出错后显示错误，并不启动调试</span></span><br><span class="line">    <span class="comment">/*html*/</span></span><br><span class="line">    <span class="attr">&quot;html.format.indentHandlebars&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="comment">//在写包含形如&#123;&#123;xxx&#125;&#125;的标签的html文档时，也对标签进行缩进（更美观）</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="number">12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970</span></span><br></pre></td></tr></table></figure>

<h1 id="好用的插件及其相关设置"><a href="#好用的插件及其相关设置" class="headerlink" title="好用的插件及其相关设置"></a>好用的插件及其相关设置</h1><p>以下列出了一些好用的插件及其相关设置，按使用情景分类。</p>
<p>自行选择需要的安装。</p>
<h2 id="通用"><a href="#通用" class="headerlink" title="通用"></a>通用</h2><h3 id="Chinese-Simplified-Language-Pack-for-Visual-Studio-Code：必不可少的中文插件"><a href="#Chinese-Simplified-Language-Pack-for-Visual-Studio-Code：必不可少的中文插件" class="headerlink" title="Chinese (Simplified) Language Pack for Visual Studio Code：必不可少的中文插件"></a>Chinese (Simplified) Language Pack for Visual Studio Code：必不可少的中文插件</h3><p><img src="/../../images/5a71d66128936949ffd16231221fa699.png" alt="image-20210211192056485"></p>
<p>汉化你的vscode！让界面、设置等都变成中文！</p>
<p><strong>配置</strong></p>
<p>无需配置，即装即用，记得装完后重启vscode。</p>
<h3 id="驼峰翻译助手：不再让取变量名成为一件难事"><a href="#驼峰翻译助手：不再让取变量名成为一件难事" class="headerlink" title="驼峰翻译助手：不再让取变量名成为一件难事"></a>驼峰翻译助手：不再让取变量名成为一件难事</h3><p><img src="/../../images/420ab1fa8c62a44a8aca30b5ead76499.png" alt="image-20210202114049249"></p>
<p><strong>英文不好 写代码起变量名时候 你是否一直这样干?</strong></p>
<ol>
<li>打开翻译软件</li>
<li>输入中文</li>
<li>复制翻译结果</li>
<li>粘贴英文之后修改命名格式（比如小驼峰、大驼峰）</li>
</ol>
<p><strong>现在你只需要按动图这样来就可以了：</strong></p>
<ol>
<li>选中输入按快捷键一键得到翻译结果(悄悄告诉你 直接选择英文文本还可以跳过翻译快速改变命名格式)</li>
<li>选择你喜欢的命名格式（比如小驼峰、大驼峰）</li>
</ol>
<p><img src="/../../images/4efca9298887479ed76f0490740a4dcb.gif" alt="img"></p>
<p><strong>快捷键</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">win: &quot;Alt+shift+t&quot; </span><br><span class="line">mac&quot;: &quot;cmd+shift+t&quot;</span><br><span class="line">12</span><br></pre></td></tr></table></figure>

<h3 id="Error-Lens：在行内突出显示代码ERROR-WARNING"><a href="#Error-Lens：在行内突出显示代码ERROR-WARNING" class="headerlink" title="Error Lens：在行内突出显示代码ERROR&#x2F;WARNING"></a>Error Lens：在行内突出显示代码ERROR&#x2F;WARNING</h3><p><img src="/../../images/d736153b60d91781bd20be808e5e7b5f.png" alt="image-20210509165411227"></p>
<p><strong>使用前：</strong></p>
<p><img src="/../../images/20210509170241.png" alt="image-20210509170201568"></p>
<p><strong>使用后：</strong></p>
<p><img src="/../../images/20210509170244.png" alt="image-20210509170223566"></p>
<p><strong>配置</strong></p>
<p>在<code>settings.json</code>中加入如下内容作为配置，设置项的意义已经注释：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;errorLens.gutterIconsEnabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span><span class="comment">//在行号的左边显示小错误图标（个人喜好）</span></span><br><span class="line"><span class="attr">&quot;errorLens.fontStyleItalic&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="comment">//使错误信息的字体为斜体（个人喜好）</span></span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure>

<h3 id="Bracket-Pair-Colorizer-2：美观的彩虹括号，让你不再为繁杂的括号烦恼"><a href="#Bracket-Pair-Colorizer-2：美观的彩虹括号，让你不再为繁杂的括号烦恼" class="headerlink" title="Bracket Pair Colorizer 2：美观的彩虹括号，让你不再为繁杂的括号烦恼"></a>Bracket Pair Colorizer 2：美观的彩虹括号，让你不再为繁杂的括号烦恼</h3><p><img src="/../../images/52e17623bdbb796e31337811ce476e53.png" alt="image-20210211191453883"></p>
<p><strong>使用前：</strong></p>
<p><img src="/../../images/24a66f98b955f1f45f4c6d36329c4f51.png" alt="image-20210211191837801"></p>
<p><strong>使用后：</strong></p>
<p><img src="/../../images/e29b49c4feef594ac4c8f33f0cecb215.png" alt="image-20210211191805784"></p>
<p><strong>配置</strong></p>
<p>无需配置，即装即用，记得装完后重启vscode。</p>
<h3 id="Code-Runner：以最简洁的方式运行任何代码"><a href="#Code-Runner：以最简洁的方式运行任何代码" class="headerlink" title="Code Runner：以最简洁的方式运行任何代码"></a>Code Runner：以最简洁的方式运行任何代码</h3><p><img src="/../../images/b4bcf76dcc701af590ce227350aecbb3.png" alt="image-20210211193113634"></p>
<p>不需要繁琐的“调试”配置，Code Runner可以快速地以最简洁的方式运行你的任何代码！</p>
<p>支持超过40种语言！</p>
<p><strong>一键运行</strong></p>
<p>安装好Code Runner插件之后，打开你所要运行的文件，有多种方式来快捷地运行你的代码：</p>
<ul>
<li>键盘快捷键Ctrl+Alt+N</li>
<li>快捷键F1或Ctrl+Shift+P调出 <strong>命令面板</strong>, 然后输入 <strong>Run Code</strong></li>
<li>在编辑区右键选择 <strong>Run Code</strong></li>
<li>在侧边栏文件管理器中右键你要运行的文件，选择 <strong>Run Code</strong></li>
<li>右上角的运行小三角按钮</li>
</ul>
<p>这么多运行代码的方式，够便捷不？</p>
<p><strong>停止运行</strong></p>
<p>如果要停止代码运行，也有如下几种方式：</p>
<ul>
<li>键盘快捷键Ctrl+Alt+M</li>
<li>快捷键F1或Ctrl+Shift+P调出 <strong>命令面板</strong>, 然后输入 <strong>Stop Code Run</strong></li>
</ul>
<p><strong>配置</strong></p>
<p>想要舒服的使用Code Runner插件，你需要进行一些配置。</p>
<blockquote>
<p>提示：</p>
<p>事实上，通过<strong>控制台</strong>输入<strong>命令</strong>的方式能运行大部分代码，而Code Runner的原理就是帮你在<strong>控制台</strong>输入这些<strong>命令</strong>。</p>
<p>因此，Code Runner<strong>并不能</strong>提供运行你的代码所需的<strong>环境或编译器</strong>，你仍需要下载安装这些<strong>环境或编译器</strong>。</p>
</blockquote>
<p>在<code>settings.json</code>中加入如下内容作为配置，设置项的意义已经注释：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;code-runner.runInTerminal&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span><span class="comment">//在控制台运行代码，防止乱码和不能输入</span></span><br><span class="line"><span class="attr">&quot;code-runner.executorMap&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;javascript&quot;</span><span class="punctuation">:</span> <span class="string">&quot; cls &amp;&amp; cd /d $dir &amp;&amp; node $fullFileName &amp;&amp; pause&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;python&quot;</span><span class="punctuation">:</span> <span class="string">&quot; cls &amp;&amp; cd /d $dir &amp;&amp; \&quot;$pythonPath\&quot; -u $fullFileName &amp;&amp; pause&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;bat&quot;</span><span class="punctuation">:</span> <span class="string">&quot; cls &amp;&amp; cd /d $dir &amp;&amp; $fullFileName&quot;</span></span><br><span class="line">    <span class="comment">/*这是每种语言运行时所执行命令的对应表，因为笔者使用的语言有限，这里只列出了javascript、python和windows批处理的命令，其他语言的命令可自行添加*/</span></span><br><span class="line">    <span class="comment">/*笔者其他博客中可能会有关于对此设置项的添加或删改的内容*/</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;code-runner.saveFileBeforeRun&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">//运行前自动保存</span></span><br><span class="line"><span class="attr">&quot;code-runner.customCommand&quot;</span><span class="punctuation">:</span> <span class="string">&quot; cls&quot;</span><span class="punctuation">,</span><span class="comment">//这使Ctrl+Alt+K这个快捷键可以快速清空控制台内容</span></span><br><span class="line"><span class="attr">&quot;code-runner.respectShebang&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="comment">//我是Windows系统所以不需要按shebang来运行</span></span><br><span class="line"><span class="attr">&quot;code-runner.ignoreSelection&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span><span class="comment">//禁用“运行选中部分的代码”功能（个人喜好，感觉这个功能很鸡肋）</span></span><br><span class="line"><span class="comment">//需要注意的是，所有命令前都有一个空格，用来“喂给”上一次运行结尾的“请按任意键继续. . .”</span></span><br><span class="line"><span class="number">12345678910111213</span></span><br></pre></td></tr></table></figure>

<p><strong>运行效果</strong></p>
<p>运行python：</p>
<p><img src="/../../images/51316b2ac49680bc5491422b8cb7809e.gif" alt="2"></p>
<p>运行javascript：</p>
<p><img src="/../../images/497c5b0b1d5c05688e5c79c5e8d5fbe8.gif" alt="3"></p>
<p>运行windows批处理：</p>
<p><img src="/../../images/3fff97ef9e7d3e4cc9ca9c68b82cf638.gif" alt="4"></p>
<h3 id="Polacode-fixed-edition-：分享更漂亮的代码片段"><a href="#Polacode-fixed-edition-：分享更漂亮的代码片段" class="headerlink" title="Polacode (fixed edition)：分享更漂亮的代码片段"></a>Polacode (fixed edition)：分享更漂亮的代码片段</h3><p><img src="/../../images/2da35a57298b9caaa8a8bfc6617886f7.png" alt="image-20210509164831759"></p>
<p>生成更好看的代码片段图片来分享给你的朋友或同事。</p>
<p><strong>用法</strong></p>
<p>快捷键F1或Ctrl+Shift+P调出 <strong>命令面板</strong>, 然后输入<strong>Polacode</strong>以打开Polacode面板。</p>
<p>打开面板后在左侧编辑器选中一段代码，右侧的Polacode面板便会呈现出好看的代码片段。</p>
<p>点击<img src="/../../images/4503d58fcec8fb06135c951ba8df8702.png" alt="img">以保存代码片段。</p>
<p><strong>配置</strong></p>
<p>在<code>settings.json</code>中加入如下内容作为配置，设置项的意义已经注释：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;polacode.target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;snippet&quot;</span><span class="comment">//去除生成的代码段图片周围的碍眼边框</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>

<h3 id="TODO-Highlight：高亮你的TODO"><a href="#TODO-Highlight：高亮你的TODO" class="headerlink" title="TODO Highlight：高亮你的TODO"></a>TODO Highlight：高亮你的TODO</h3><p><img src="/../../images/68975c01157cfc6cd2adf9794f926a04.png" alt="image-20210211225559473"></p>
<p>高亮你的<em>TODO</em>注释。</p>
<p><strong>使用前</strong></p>
<p><img src="/../../images/a6be9ccf6ccb10a84c771c0612a1e8ed.png" alt="image-20210211225346417"></p>
<p><strong>使用后</strong></p>
<p><img src="/../../images/b1aa1f148619d3a7bb7ca58cfcf29e2e.png" alt="image-20210211225308933"></p>
<p><strong>配置</strong></p>
<p>无需配置，即装即用，记得装完后重启vscode。</p>
<h3 id="VS-Code-Counter：统计代码行数"><a href="#VS-Code-Counter：统计代码行数" class="headerlink" title="VS Code Counter：统计代码行数"></a>VS Code Counter：统计代码行数</h3><p><img src="/../../images/16cd8cc814b7d46f5c2221011d765e19.png" alt="image-20210211225622841"></p>
<p>统计你的项目中有多少行代码！以及各语言的占比！</p>
<p><strong>用法</strong></p>
<p>快捷键F1或Ctrl+Shift+P调出 <strong>命令面板</strong>, 然后输入<strong>Count lines in directory</strong>以开始统计。</p>
<p>统计完成会生成一个<code>.VSCodeCounter</code>文件夹，并自动打开里面的报告：</p>
<p>例如：</p>
<p><img src="/../../images/052d06f1145a5be83ee8b6f7eea20a54.png" alt="image-20210211230132635"></p>
<h2 id="前端开发"><a href="#前端开发" class="headerlink" title="前端开发"></a>前端开发</h2><h3 id="CSS-Navigation：快速跳转到CSS的类定义"><a href="#CSS-Navigation：快速跳转到CSS的类定义" class="headerlink" title="CSS Navigation：快速跳转到CSS的类定义"></a>CSS Navigation：快速跳转到CSS的类定义</h3><p><img src="/../../images/0cc2b4ea76369b0b0c55e257c43dc8ac.png" alt="image-20210211200907387"></p>
<p>由于未知原因，笔者电脑上CSS Peek插件有时不起作用，遂采用更稳定的CSS Navigation作为替代品。</p>
<p>按住Ctrl键，鼠标移到html中的CSS类名上，可悬浮预览该类的CSS定义，此时按下鼠标左键，快速跳转到CSS定义处。</p>
<p><strong>效果</strong></p>
<p><img src="/../../images/b88639160f0c48b44118159dd4d89f18.gif" alt="5"></p>
<p><strong>缺点</strong></p>
<p>不能悬浮预览和跳转到html文件内&#96;&#96;标签内的CSS类定义，只能悬浮预览和跳转到外部.css文件的CSS类定义处。</p>
<p><strong>配置</strong></p>
<p>无需配置，即装即用，记得装完后重启vscode。</p>
<h3 id="css-auto-prefix：写CSS时不再为浏览器前缀发愁"><a href="#css-auto-prefix：写CSS时不再为浏览器前缀发愁" class="headerlink" title="css-auto-prefix：写CSS时不再为浏览器前缀发愁"></a>css-auto-prefix：写CSS时不再为浏览器前缀发愁</h3><p><img src="/../../images/085bbe1dcf3d7f63d15954674ded042a.png" alt="image-20210211202159675"></p>
<p>自动补全不同浏览器的CSS3前缀。</p>
<p><strong>效果</strong></p>
<p><img src="/../../images/b85b5cb7f5183f3a1639418f964b56b4.gif" alt="6"></p>
<p><strong>配置</strong></p>
<p>无需配置，即装即用，记得装完后重启vscode。</p>
<h3 id="Image-Preview：快速预览HTML中的图片"><a href="#Image-Preview：快速预览HTML中的图片" class="headerlink" title="Image Preview：快速预览HTML中的图片"></a>Image Preview：快速预览HTML中的图片</h3><p><img src="/../../images/19a8027b7e3a1c6af22c0990459e8eff.png" alt="image-20210211204328501"></p>
<p><strong>功能</strong></p>
<p>当鼠标移到html文档中的图片路径上时，悬浮预览图片，还可跳转到侧边栏文件管理器中或系统文件管理器中</p>
<p><strong>效果</strong></p>
<p><img src="/../../images/adb30279d7ec8ecf23bf1017526db873.gif" alt="7"></p>
<p><strong>配置</strong></p>
<p>安装这个插件后默认还会在行号左边显示图片缩略图：</p>
<p><img src="/../../images/36b9d48595ff4193e4476f905feaccb1.png" alt="image-20210211205135512"></p>
<p>笔者不太喜欢，所以通过在setting.json中添加如下配置关掉了这个功能：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;gutterpreview.showImagePreviewOnGutter&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>

<h3 id="IntelliSense-for-CSS-class-names-in-HTML：自动补全CSS类名"><a href="#IntelliSense-for-CSS-class-names-in-HTML：自动补全CSS类名" class="headerlink" title="IntelliSense for CSS class names in HTML：自动补全CSS类名"></a>IntelliSense for CSS class names in HTML：自动补全CSS类名</h3><p><img src="/../../images/67712c811ca7e7d65db30c9fc4c5e0bc.png" alt="image-20210211205759839"></p>
<p>自动补全CSS类名。</p>
<p><strong>效果</strong></p>
<p><img src="/../../images/118e9778ff3d6d829d22e30d15120d8f.gif" alt="8"></p>
<p><strong>配置</strong></p>
<p>无需配置，即装即用，记得装完后重启vscode。</p>
<h3 id="JS-CSS-HTML-Formatter：格式化js、css、html文件"><a href="#JS-CSS-HTML-Formatter：格式化js、css、html文件" class="headerlink" title="JS-CSS-HTML Formatter：格式化js、css、html文件"></a>JS-CSS-HTML Formatter：格式化js、css、html文件</h3><p><img src="/../../images/06dc29c876cec712dea2472e78176ee5.png" alt="image-20210211211028432"></p>
<p>用于格式化js、css、html文件（其实主要是用来格式css文件，因为前两者vscode有内置格式化引擎）</p>
<p><strong>配置</strong></p>
<p>需要在setting.json中加入如下内容作为配置：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;[html]&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;editor.defaultFormatter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;lonefy.vscode-JS-CSS-HTML-formatter&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;[javascript]&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;editor.defaultFormatter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;lonefy.vscode-JS-CSS-HTML-formatter&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="attr">&quot;[json]&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;editor.defaultFormatter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vscode.json-language-features&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="number">123456789</span></span><br></pre></td></tr></table></figure>

<p><em>用于把 html和 js的格式化也交给这个插件负责的同时不要把json的格式化交给它负责。</em></p>
<h3 id="Live-Server：实时地使用浏览器预览你的前端页面"><a href="#Live-Server：实时地使用浏览器预览你的前端页面" class="headerlink" title="Live Server：实时地使用浏览器预览你的前端页面"></a>Live Server：实时地使用浏览器预览你的前端页面</h3><p><img src="/../../images/0f415076b2d4b064bcc14dc4ad62f53b.png" alt="image-20210211211836432"></p>
<p>还在浏览器里频繁地刷新来预览前端页面？忍受不了写一会代码就要刷新一下来预览页面？试试Live Server！</p>
<p><strong>用法</strong></p>
<p>在侧边栏文件资源管理器中右键文件选择<strong>Open with Live Server</strong>启动：<br><img src="/../../images/20210211212459.png" alt="image-20210211212458192"></p>
<p>或打开编辑html文件时点击vscode下方状态栏右边的<strong>Go Live</strong>启动：<br><img src="/../../images/69a3fe8f6173db15e1eef99d3909dbf9.png" alt="image-20210211212812744"></p>
<p>此时Live Server启动了一个服务器来实现实时预览前端页面。</p>
<p>保存文件时浏览器便会实时更新页面。</p>
<p><strong>效果</strong></p>
<p><img src="/../../images/40fb7a5dc95fedc9abbe3a8c97c2fe77.gif" alt="9"></p>
<p><strong>停止</strong></p>
<p>快捷键F1或Ctrl+Shift+P调出 <strong>命令面板</strong>, 然后输入<strong>Stop Live Server</strong>以停止Live Server服务器。</p>
<p>也可以点击vscode下方状态栏右边的图标停止Live Server服务器。<img src="/../../images/225c58ad1e45e93fa6edbc4ad10e380f.png" alt="image-20210211214327956"></p>
<blockquote>
<p>注意：关闭浏览器并不会停止Live Server服务器，但关闭vscode可以停止Live Server服务器。</p>
</blockquote>
<p><strong>配置</strong></p>
<p>默认使用系统默认浏览器访问服务器，通过在setting.json中添加如下配置可以改变访问服务器所用的浏览器：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;liveServer.settings.CustomBrowser&quot;</span><span class="punctuation">:</span> 浏览器名</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>

<p><em><strong>浏览器名</strong></em> 的取值如下（默认为null）：</p>
<p><img src="/../../images/9863eb90a0c874c51d6e88afbbc2899b.png" alt="image-20210211222847920"></p>
<h3 id="open-in-browser：从vscode打开浏览器以预览前端页面"><a href="#open-in-browser：从vscode打开浏览器以预览前端页面" class="headerlink" title="open in browser：从vscode打开浏览器以预览前端页面"></a>open in browser：从vscode打开浏览器以预览前端页面</h3><p><img src="/../../images/062d852685f197f2128bb2e5c88f83d9.png" alt="image-20210211221440912"></p>
<p>在vscode中打开浏览器以预览前端页面</p>
<p><strong>用法</strong></p>
<p>在侧边栏文件资源管理器中右键html文件选择<strong>Open In Default Browser</strong>从浏览器打开以预览页面：</p>
<p><img src="/../../images/d0d6acba396eda3b553bf3f9e37870bc.png" alt="image-20210211222253331"></p>
<p>如果要在其他浏览器打开可以选择<strong>Open In Other Browsers</strong>。</p>
<p><strong>配置</strong></p>
<p>无需配置，即装即用，记得装完后重启vscode。</p>
<h3 id="Path-Intellisense：智能补全路径"><a href="#Path-Intellisense：智能补全路径" class="headerlink" title="Path Intellisense：智能补全路径"></a>Path Intellisense：智能补全路径</h3><p><img src="/../../images/286fdbba75b5b539c8351601a0949247.png" alt="image-20210211223241272"></p>
<p>智能补全html文件中的文件路径。</p>
<p><strong>效果</strong></p>
<p><img src="/../../images/926675023562d1f76165c1df70094a4f.gif" alt="11"></p>
<p><strong>配置</strong></p>
<p>无需配置，即装即用，记得装完后重启vscode。</p>
<h2 id="摸鱼"><a href="#摸鱼" class="headerlink" title="摸鱼"></a>摸鱼</h2><h3 id="epub-reader：摸鱼必备！vscode看小说！支持epub！"><a href="#epub-reader：摸鱼必备！vscode看小说！支持epub！" class="headerlink" title="epub reader：摸鱼必备！vscode看小说！支持epub！"></a>epub reader：摸鱼必备！vscode看小说！支持epub！</h3><p><img src="/../../images/6484e117ab419dc89ea18ab652364204.png" alt="image-20210211203047646"></p>
<p><strong>功能</strong></p>
<ul>
<li>支持字体大小，字体颜色自定义</li>
<li>阅读进度显示以及自动记录</li>
<li>支持目录跳转</li>
<li>书架编辑</li>
</ul>
<p><strong>添加书本</strong></p>
<p>在<code>C:\Users\你的用户名\.vscode\extensions\renkun.reader-1.1.6\book</code>路径下增删书本文件（须为<code>.epub</code>文件类型）</p>
<p><strong>用法</strong></p>
<p>按Ctrl+3进入小说阅读界面，鼠标移到书本目录下方可自定义字体大小颜色（记得点<code>save</code>哦）。</p>
<p>点击要阅读的书本，进入后左右有按钮可翻页，鼠标移到小说阅读界面上方可返回或进行章节跳转。</p>
<h2 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h2><h3 id="中文引号修正：解决写作时的小毛病"><a href="#中文引号修正：解决写作时的小毛病" class="headerlink" title="中文引号修正：解决写作时的小毛病"></a>中文引号修正：解决写作时的小毛病</h3><p><img src="/../../images/a3e1d2ae23085ab50dd3041ac2e70109.png" alt="image-20210211185956749"></p>
<p>用于自动修正中文文档里的双引号。在用vscode写作时格外有用。</p>
<p>它假设 <code>“</code> 和 <code>”</code> 应当依次轮流出现。比如如下这段</p>
<blockquote>
<p>”你听说过Lisa吗？”</p>
<p>“没有欸“我说道，”她是不是那个勇者的母亲？“</p>
</blockquote>
<p>会被修正为</p>
<blockquote>
<p>“你听说过Lisa吗？”</p>
<p>“没有欸”我说道，“她是不是那个勇者的母亲？”</p>
</blockquote>
<p><strong>用法</strong></p>
<p>有两种用法：</p>
<ol>
<li>选中一部分文档内容 -&gt; Ctrl+Shift+P调出<strong>命令面板</strong> -&gt; 输入<code>Smart Quote</code>， 然后回车。这个是只修正选中部分。</li>
<li>什么都不选，直接Ctrl+Shift+P调出<strong>命令面板</strong> -&gt; 输入 <code>Smart Quote</code>， 然后回车。这个是全部修正。</li>
</ol>
<p><strong>已知问题</strong></p>
<p>目前无法处理多个不连续选择的情况。</p>
<p>目前无法修正单引号。</p>
<h3 id="Markdown-All-in-One：书写Markdown利器"><a href="#Markdown-All-in-One：书写Markdown利器" class="headerlink" title="Markdown All in One：书写Markdown利器"></a>Markdown All in One：书写Markdown利器</h3><p><img src="/../../images/02df662d3bee9f1af332bfba71eaa09d.png" alt="image-20210211214635448"></p>
<p>从”All in One“的名字可以看出该插件含有很多功能，可以增强Markdown写作体验。</p>
<p>具体有哪些功能，大家可以自己探索，笔者不多介绍了。</p>
<p><strong>配置</strong></p>
<p>无需配置，即装即用，记得装完后重启vscode。</p>
<h3 id="Word-Count-CJK：写作必备的字数统计插件"><a href="#Word-Count-CJK：写作必备的字数统计插件" class="headerlink" title="Word Count CJK：写作必备的字数统计插件"></a>Word Count CJK：写作必备的字数统计插件</h3><p><img src="/../../images/fee4030e6d19a2b8b7afb17954245683.png" alt="image-20210211215030345"></p>
<p>大部分字数统计插件都不能统计中文的字数，而这个插件可以。</p>
<p>在编辑Markdown或纯文本（txt）时，在vscode下方状态栏左边可以显示实时字数统计。</p>
<p><strong>效果</strong></p>
<p><img src="/../../images/300175d4747dd556155507a4aec50d40.gif" alt="10"></p>
<p><strong>配置</strong></p>
<p>在<code>settings.json</code>中加入如下内容作为配置：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;wordcount_cjk.statusBarTextTemplate&quot;</span><span class="punctuation">:</span> <span class="string">&quot;中文字数：$&#123;cjk&#125; ,英文单词数：$&#123;en_words&#125; ,非空白字符数：$&#123;total - whitespace&#125; ,总字符数：$&#123;total&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;wordcount_cjk.activateLanguages&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;markdown&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;plaintext&quot;</span></span><br><span class="line"><span class="punctuation">]</span></span><br><span class="line"><span class="number">12345</span></span><br></pre></td></tr></table></figure>

<h1 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h1><p>笔者所用的主题叫做<strong>Gruvbox Material Dark</strong>。</p>
<p>由该插件提供：</p>
<p><img src="/../../images/3f3fbe641e2e165f9c70c5c3af19e1c2.png" alt="image-20210211235331645"></p>
<p>看起来像这样：</p>
<p><img src="/../../images/12d677b3f0644c9ed06fd39164427950.png" alt="image-20210212000344269"></p>
<p><strong>配置</strong></p>
<p>下载安装该插件后须在setting.json中加入如下内容作为配置，设置项的意义已经注释：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;gruvboxMaterial.italicKeywords&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span><span class="comment">//关键字为斜体</span></span><br><span class="line"><span class="attr">&quot;gruvboxMaterial.darkContrast&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hard&quot;</span><span class="comment">//加深对比度（默认的太浅了）</span></span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
        <category>软件</category>
        <category>VScode</category>
      </categories>
      <tags>
        <tag>转载</tag>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title>&lt;&lt;苏菲的世界&gt;&gt;中的哲学史</title>
    <url>/2023-8/%E8%8B%8F%E8%8F%B2%E7%9A%84%E4%B8%96%E7%95%8C%E4%B8%AD%E7%9A%84%E5%93%B2%E5%AD%A6%E5%8F%B2/</url>
    <content><![CDATA[<blockquote>
<p>原文地址: <a href="https://zhuanlan.zhihu.com/p/32322424">https://zhuanlan.zhihu.com/p/32322424</a></p>
</blockquote>
<h3 id="01-自然派哲学家——关切大自然与它的循环变化"><a href="#01-自然派哲学家——关切大自然与它的循环变化" class="headerlink" title="01.自然派哲学家——关切大自然与它的循环变化"></a>01.自然派哲学家——关切大自然与它的循环变化</h3><p><strong>被称为“苏格拉底之前的哲学家”</strong></p>
<ul>
<li><strong>泰利斯</strong>——水是万物之源</li>
<li><strong>安纳克西曼德</strong>——世界由无限定者元素所构成</li>
<li><strong>安那西梅尼斯</strong>——万物之源是“空气”或“气体”</li>
<li><strong>帕梅尼德斯</strong>——万物一直存在</li>
<li><strong>赫拉克里特斯</strong>——恒常变化（或流动）大自然基本特征</li>
<li><strong>恩培窦可里斯</strong>——大自然由土、气、火与水组成</li>
<li><strong>安纳萨格拉斯</strong>——无数看不见的微小粒子组成</li>
<li><strong>德谟克里特斯</strong>——无数形状各异的院子组成</li>
</ul>
<h3 id="02-雅典的哲学"><a href="#02-雅典的哲学" class="headerlink" title="02.雅典的哲学"></a>02.雅典的哲学</h3><ul>
<li><strong>苏格拉底</strong>——不是讲课，而是与别人进行讨论</li>
<li><strong>柏拉图</strong>——在物质世界的背后，必定有一个实在存在，他称这个实在为“理型的世界”，其中包含存在于自然界各种现象背后，永恒不变的模式</li>
<li><strong>亚里士多德</strong>——组织家，发明了各种科学并加以分类</li>
</ul>
<h3 id="03-希腊哲学"><a href="#03-希腊哲学" class="headerlink" title="03.希腊哲学"></a>03.希腊哲学</h3><ul>
<li><strong>犬儒学派</strong>——真正幸福的人不依赖这些稍纵即逝的东西；代表人物戴奥基尼斯——我希望你闪到旁边，让我可以晒到太阳</li>
<li><strong>斯多葛学派</strong>——创始人季诺——宇宙间有公理存在</li>
<li><strong>伊比鸠鲁学派</strong>——伊比鸠鲁——死亡和我们没有关系，因为只要我们存在一天，死亡就不会来临。而当死亡来临时，我们也不再存在了</li>
<li><strong>新柏拉图派哲学</strong>——普罗汀——世界横跨两级：神圣之光和完全黑暗</li>
</ul>
<p><strong>基督教诞生，耶稣降临，犹太教、伊斯兰教出现</strong></p>
<h3 id="04-中世纪哲学家"><a href="#04-中世纪哲学家" class="headerlink" title="04.中世纪哲学家"></a>04.中世纪哲学家</h3><ul>
<li><strong>圣奥古斯丁</strong>——上帝与世界之间有一道不可跨越的距离</li>
<li><strong>圣多玛斯</strong>——我们可以透过理性的思考与感官的证据推知一部分的真理</li>
</ul>
<p><strong>文艺复兴时期</strong>，新的世界观 <strong>人文主义</strong>——用我们的感官来调查研究大自然</p>
<ul>
<li><strong>哥白尼</strong>——以太阳为中心的世界观</li>
<li><strong>伽利略</strong>——天文望远镜观察天体运转；惯性定律</li>
<li><strong>牛顿</strong>——解释各星球为何及如何绕太阳运转</li>
</ul>
<h3 id="05-十七世纪"><a href="#05-十七世纪" class="headerlink" title="05.十七世纪"></a>05.十七世纪</h3><p><strong>巴洛克时期</strong>：<strong>理想主义</strong>和<strong>唯物主义</strong>——剧场是最完美的艺术形式</p>
<ul>
<li><strong>霍布士</strong>——自然界所有的现象，包括人与动物都完全是由物质的分子所组成的，甚至意识由微小分子运动</li>
<li><strong>笛卡尔</strong>——现代哲学之父——整理各种新思想，综合成一个条理分明的哲学体系；除非我们能够清楚分明地知道某件事情是真实的，否则我们就不能够认为它是真的；我思故我在</li>
<li><strong>斯宾诺莎</strong>——用永恒的观点来看事情，《几何伦理学》</li>
</ul>
<h2 id="06-十八世纪"><a href="#06-十八世纪" class="headerlink" title="06.十八世纪"></a>06.十八世纪</h2><ul>
<li><p><strong>经验主义</strong>——用感官的经验获取一切有关世界的知识</p>
</li>
<li><p><strong>洛克</strong>——我们所有的思想和观念都反映我们曾看过、听过的事物</p>
</li>
<li><p><strong>休姆</strong>——断定人有两种知觉、印象和观念；我们有时会将物质世界中原来并不共存的概念放在一起；习惯性期待</p>
</li>
<li><p><strong>柏克莱</strong>——时间所存在的只有那些我们感受到的事情</p>
</li>
</ul>
<p><strong>法国启蒙运动时期</strong>——“自由、平等、博爱”口号</p>
<ul>
<li><strong>康德</strong>——我们对于这个世界的观念是我们同时透过感官与理性而得到的；不仅心灵会顺应事物的形状，事物也会顺应心灵；“事物本身”和“我眼中的事物”是不一样的</li>
<li><strong>浪漫主义</strong>——“感情”、“想象”、“经验”、“渴望”</li>
</ul>
<p>——童话故事是浪漫主义者理想中最完美的文学类型</p>
<ul>
<li><strong>贝多芬</strong>——用音乐来表达自我的情感与渴望</li>
<li><strong>拜伦</strong>——“恶魔派”的浪漫主义使人（雪莱也是）</li>
<li><strong>谢林</strong>——将心灵与物质合而为一；世界“在上帝之内”</li>
<li><strong>赫德</strong>——历史的特性就是连续、进化与设计；首开风气之先，把民俗故事称为“民族的母语”</li>
<li><strong>费希特</strong>——大自然源自一个更高的、无意识的想象力</li>
<li><strong>黑格尔</strong>——浪漫主义的传人——人类认知的基础代代不同，因此时间并没有“永恒的真理”，没有“永久的理性”。哲学唯一可以确切掌握的一个定点就是历史；历史本身展现了辩证模式，“否定的思考”</li>
</ul>
<p><strong>存在主义者——</strong></p>
<ul>
<li><strong>祁克果</strong>——与其寻找那唯一的真理，不如去找寻那些对个人生命具有意义的真理；真正重要的真理都是属于个人的；人生三阶段：美感阶段、道德阶段、宗教阶段</li>
</ul>
<h3 id="07-十九世纪"><a href="#07-十九世纪" class="headerlink" title="07.十九世纪"></a>07.十九世纪</h3><p><strong>自然主义</strong></p>
<ul>
<li><p><strong>马克思</strong>——唯物主义者——促成改变并因此把历史向前推进的，其实是一个社会的经济力量；是非对错的观念乃是社会基础的产物；一个社会的是非标准主要是由那个社会里的统治阶级来决定的，因为“人类社会的历史就是一部阶级斗争史”；在历史的各个阶段，社会的两个主要阶段彼此之间都会有冲突存在</p>
</li>
<li><p><strong>达尔文</strong>——《物种起源论》——既存的所有动植物样式都是依照生物进化的法则，从较早期、较原始的形式演变而来；生物进化乃是自然淘汰的结果</p>
</li>
<li><p><strong>弗洛伊德</strong>——文化哲学家——人和他的环境之间不断有一种紧张关系存在。这种紧张关系尤其存在于他的驱策力、需要和社会的需求之间；我们都会把所有经验的记忆储藏在内心深处<br><strong>存在主义</strong></p>
</li>
<li><p><strong>尼采</strong>——要终于这个世界，不要听信那些让你有超自然期望的人</p>
</li>
<li><p><strong>萨特</strong>——存在主义者乃是以人类为出发点；人的存在比任何其他事情都重要，我们存在的这个事实比我是谁更加重要。“存在先于本质”。人并没有一种不变的“本性”</p>
</li>
</ul>
<h3 id="08-二十世纪"><a href="#08-二十世纪" class="headerlink" title="08.二十世纪"></a>08.二十世纪</h3><ul>
<li><p><strong>唯物主义</strong>——生态哲学</p>
</li>
<li><p><strong>未来的宇宙</strong>——一直在扩张或再度收缩</p>
</li>
</ul>
]]></content>
      <categories>
        <category>日常</category>
        <category>信息</category>
      </categories>
      <tags>
        <tag>读书</tag>
        <tag>哲学</tag>
        <tag>搬运</tag>
      </tags>
  </entry>
  <entry>
    <title>&lt;哲学家们都干了些什么&gt;中的哲学史</title>
    <url>/2023-8/%E5%93%B2%E5%AD%A6%E5%AE%B6%E4%BB%AC%E9%83%BD%E5%B9%B2%E4%BA%86%E4%BA%9B%E4%BB%80%E4%B9%88-%E4%B8%AD%E7%9A%84%E5%93%B2%E5%AD%A6%E5%8F%B2/</url>
    <content><![CDATA[<p>原文链接: <a href="https://zhuanlan.zhihu.com/p/19866832#!">「读书笔记」: 哲学家们都干了些什么? |</a></p>
<p>这本书很有趣. 作者一开始就说明了本书主要关心两个问题:</p>
<ol>
<li>人生的意义是什么?</li>
<li>我如何才能获得最大的幸福?</li>
</ol>
<p>然后作者按照时间顺序, 从苏格拉底开始, 一路描绘了哲学家们不断对当时哲学理念的怀疑, 然后提出新的理念, 然后再被怀疑, 这样不断往前发展的过程.</p>
<p>作者的语言诙谐, 人物形象生动, 读起来很带感. 这次的读书笔记, 则会尽量抽取其中各大哲学门派的理念进行总结, 方便后续温习. 如果想详细了解各哲学门派的理念推理过程或相关八卦, 建议还是读下这本书吧~</p>
<h2 id="希腊哲学"><a href="#希腊哲学" class="headerlink" title="希腊哲学"></a>希腊哲学</h2><blockquote>
<p>哲学是对普遍而基本的问题的研究.</p>
<p>– Wikipedia</p>
</blockquote>
<p>哲学研究的范围很广. 在古希腊时代, 哲学连物料都包括在内. 说起古希腊, 最先想起的哲学家就是「苏格拉底」. 他这辈子做的最多的事情就是「问问题」, 也就是说他有着「怀疑一切」的精神.</p>
<p>苏格拉底有个学生, 叫「柏拉图」.</p>
<p>柏拉图有个学生, 叫「亚里士多德」.</p>
<p>亚里士多德有个学生, 叫「亚力山大」.</p>
<p>后来, 罗马帝国代替了亚力山大帝国, 统一了大部分欧洲. 罗马帝国成立之初的文化界就像中国春秋时的百家争鸣. 常常在城市中心的广场上, 不同学派的人当场宣讲、辩论自己的观点.</p>
<h2 id="教父哲学"><a href="#教父哲学" class="headerlink" title="教父哲学"></a>教父哲学</h2><blockquote>
<p>历史上有一个规律, 在斗争中, 哲学总站在弱者的一方.</p>
<p>这是因为哲学讲思辨, 讲道理.</p>
<p>而只有弱者才会去讲理, 强者不需要讲理.</p>
</blockquote>
<p>在古代, 宗教在人们的生活有很广泛的基础. 那时的罗马境内, 众多宗教可以互相杂处, 其中包括犹太教和基督教. 犹太教和基督教并不是同一个宗教, 他们都信奉上帝, 也都相信救世主. 区别是, 基督教认为救世主就是耶稣, 而犹太教不承认耶稣是救世主, 反而认为基督教是异端.</p>
<p>有一个人叫做「保罗」, 他原先是犹太教人, 后来改信了基督教. 他有着深厚的希腊哲学功底, 在传教中和希腊哲学家发生了辩论. 因此他将哲学的思维方式应用到了传教中, 撰写了大量的神学文章. 这些文字后来被称作「保罗书信」, 成为「圣经」的重要组成部分.</p>
<p>在保罗之后, 还有很多基督教的传教士把哲学当做了传教的武器. 正是因为他们的工作, 基督教才拥有了完善的理论基础, <strong>在哲学史上, 这时的哲学被称作「教父哲学」</strong>.</p>
<p>有一个长期因拓基督教的逻辑弱点:</p>
<p>「圣经」说上帝是全知全能全善的, 那为什么会允许人间存在这么多丑恶和痛苦?</p>
<p>另一个认真学习过哲学的基督教徒「奥古斯丁」提出了一个解释:</p>
<p>关键在于「自由」. 上帝给了人类「自由意志」, 所以也必须让人类拥有作恶的可能. 更具体点, 上帝是善的, 他要对人类的行为进行公正的赏罚. 既然要赏罚, 前提当然就是人类必须拥有自由意志, 必须能自己选择行善还是作恶, 否则人类就不应该对自己的行为负责.</p>
<p>基督教在当时征服了罗马帝国, 主要靠两个武器:</p>
<p>对知识分子, 用的是「希腊哲学」;</p>
<p>对下层人民, 用的是「众生平等」的理念.</p>
<p>后来, 基督教成了罗马国教. 之后基督教开始摒弃哲学的内容. 哲学的<strong>怀疑精神</strong>和宗教的<strong>无条件信仰</strong>有着天然的矛盾. 在宗教弱小发展时期, 需要哲学这个武器, 但在自己上位之后, 就需要除掉这个「讨厌鬼」.</p>
<h2 id="经院哲学"><a href="#经院哲学" class="headerlink" title="经院哲学"></a>经院哲学</h2><blockquote>
<p>物极必反.</p>
</blockquote>
<p>基督教在欧洲天下无敌很多年, 闲着也闲着, 宗教人士又开始讨论起神学问题.</p>
<p>有讨论就有分歧, 有分歧就要辩论. 而说到辩论, 哲学要说第二就没人敢说第一. 这时基督教的神学家们又意识到了希腊哲学的价值. 这在欧洲又掀起了一段研究哲学的小高潮, 此时的哲学被称作<strong>经院哲学</strong>.</p>
<p>经院哲学的集大成者就是「托马斯 阿奎」, 他提出五个方法证明上帝存在. 最简单的一个方法可以概括为:</p>
<blockquote>
<p>世上万事万物都要有另一个事物做为它的原因.</p>
<p>那么必然存在一个最初的原因,</p>
<p>这个原因就是上帝.</p>
</blockquote>
<p>经院哲学家想得挺好, 他们用哲学去证明宗教, 为的是让宗教也能符合更改的考验. 但是别忘了, 怀疑是哲学的核心精神. 这个证明过程有着很大的问题, 被各路哲学家们所质疑.</p>
<p>在哲学史上, 「教父哲学」和「经院哲学」的地位比较低. 但就在这么无聊的「经院哲学」时期, 出现了一个对后来的科学发展极为重要的理论–「奥卡姆剃刀」.</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">奥卡姆剃刀: 若无必要, 勿增实体.</span><br></pre></td></tr></table></figure>

<p>后来, 基督教会各种独裁敛财, 一手遮天. 这时候有个人站出来了. 他叫「马丁 路德」. 双方的争论越来越大, 千百万神甫和知识分子卷入其中, 不久之后, 基督教分成了两大派. 罗马一方被称作「天主教」, 支持路德的则被称作「新教」, 另外, 东边的罗马帝国在此之前还搞了一个「东正教」.</p>
<p>天主教、新教、东正教, 这就是今天基督教的最主要的三大教派.</p>
<p>一言兴邦, 这个千百万文人的终极梦想, 路德做到了, 他用一支笔就改变了世界.</p>
<h2 id="理性主义"><a href="#理性主义" class="headerlink" title="理性主义"></a>理性主义</h2><blockquote>
<p>哲学研究的原则: 结论必须能经得起各种怀疑, 这样才能保证它真实可信. 要避免「独断论」</p>
<p>笛卡尔、斯宾诺莎代表的数学家派, 被称为「理性主义」.</p>
<p>理性主义的研究方法是「演绎推理」.</p>
</blockquote>
<p>哲学的灵魂是怀疑精神, 笛卡尔天生就是个当哲学家的料, 他把一切都怀疑了. 他怀疑生活的这个世界是不是都是假的? 他的回答是:</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">不管我再怎么怀疑, 「我怀疑」这件事是确定的, 它是存在的. 也就是说, 只要有了怀疑的念头, 那么「我」肯定就是存在的.  「我」要是不存在, 就不会有这些怀疑的念头了.</span><br></pre></td></tr></table></figure>

<p>这也就是名言「我思故我在」的意思.</p>
<p>欧式几何从五条公理出发, 一路推理, 推出了涵盖世界所有的几何知识. 这启发了那个时代的哲学家, 要像欧式几何一样, 建立一套严密规整又高于世间万物的理论体系.</p>
<p>笛卡尔这么做了, 但他搭建的这个体系不够严密.</p>
<h3 id="形而上学"><a href="#形而上学" class="headerlink" title="形而上学"></a>形而上学</h3><blockquote>
<p>形而上学指的是「超脱于物料世界之上的道理」.</p>
<p>简单的理解成, 寻找到一个能高于客观世界, 能统领一切事物的真理.</p>
<p>形而上学的任务, 大致上相当于回答「什么事物是真实存在的」, 「什么知识是真实可靠的」这类问题.</p>
</blockquote>
<h3 id="二元论"><a href="#二元论" class="headerlink" title="二元论"></a>二元论</h3><p>笛卡尔只知道自己的意识存在, 不知道外面的世界存在不存在. 这个结论暗示着一个前提:</p>
<p>他把我们讨论的世界分成了两个部分, 一个是我们的心灵, 一个是心灵之外的部分. 这个观点就叫做<strong>「二元论」</strong>.</p>
<p>二元论对于开头提出的两个问题有什么帮助呢? 它可以帮助我们有效地躲避痛苦.</p>
<p>按照二元论, 我们的精神世界是独立的, 那么外部世界对我们的影响仅仅在于感官体验. 那么在我们遇到痛苦时, 都可以将它分成两类: 感官上的和精神上的.</p>
<p>感官上的痛苦并不难忍受. 它就被归为一些简单的精神刺激「疼痛」、「饥渴」之类. 这些相对很容易应对.</p>
<p>精神上的痛苦更不可怕了. 它不疼不痒. 在精神世界里, 我们自己就是King. 只要意志坚定, 我们就能在很大程度上控制自己的精神世界.</p>
<p>二元论帮我们的关键就是: 我们在自己的精神世界里是无敌的, 而一切体验归根到底都是精神体验.</p>
<h3 id="唯我论"><a href="#唯我论" class="headerlink" title="唯我论"></a>唯我论</h3><blockquote>
<p>只能确认自己存在, 外面的一切存在不存在我们不知道, 这叫做「唯我论」.</p>
</blockquote>
<h3 id="目的论"><a href="#目的论" class="headerlink" title="目的论"></a>目的论</h3><blockquote>
<p>目的论就是认为世间万物是因为某种目的而存在的.</p>
</blockquote>
<h3 id="斯宾诺莎"><a href="#斯宾诺莎" class="headerlink" title="斯宾诺莎"></a>斯宾诺莎</h3><p>斯宾诺莎是笛卡尔的继承者. 他完美的实现了笛卡尔的想法, 即按照欧式几何的模式来建立哲学体系.</p>
<p>第一步, 要找到公设.</p>
<p>笛卡尔怀疑一切, 那就要先找到一个绝对存在, 不可能被怀疑的东西作为公设. 斯宾诺莎把这个东西称作「实体」.</p>
<p>实体的特征是, 这东西自己就能证明自己, 不依赖外物存在, 外物也不能推毁它.</p>
<p>照这个推理下去, 实体肯定是永远存在的, 它也肯定是无限的, 是唯一的, 是不可分的.</p>
<p>如果实体是无限的, 是唯一的, 也就是说, 世间万物, 我们每一个人都是实体的一部分. 因为只是一部分, 所以是不完美的一部分.</p>
<p>如果存在上帝, 那么它一定是实体本身. 如果上帝不是实体, 上帝又无所不能, 上帝就可以改变实体. 这就和实体定义不符了.</p>
<p>他认为, 世间万物皆为上帝, 「我」也为上帝的一部分. 那么「我」与上帝同在, 自然充满无限的力量. 外人与我作对, 那也是上帝的意志, 「我」应该坦然接受.</p>
<h2 id="经验主义"><a href="#经验主义" class="headerlink" title="经验主义"></a>经验主义</h2><blockquote>
<p>在归纳法里, 最重要的是实验数据, 是观测结果, 它们是科学理论的基础和证据.</p>
<p>这些东西可以用一个词来统称:「经验」</p>
<p>「洛克」代表的科学家派被称为「经验主义」.</p>
</blockquote>
<p>科学家认为数学只是一个工具, 而不是真理. 科学家靠「归纳法」来搞研究.</p>
<p>归纳法就是说, 人们通过观察个别的现象, 总结出普遍的规律.</p>
<p>科学家怀疑数学哲学家提出的公设, 指出这些公设就是「无根之木」.</p>
<p>数学哲学家指出科学家无法保证结论的可靠性. 「归纳法」永远只能立足于「有限的」事实之上, 不可能把所有的现实全部实验一遍. 你做了一亿次实验是对的, 但你怎么保证第一亿零一次就还是对的?</p>
<p>总结一下「理性主义」和「经验主义」的论战:</p>
<p>理论名称 理性主义 经验主义 代表人物 数学家 科学家 研究方法 演绎推理 归纳法 优点 严谨 产生新的知识 缺点 不产生新的知识, 公设未必可靠 结论不能保证绝对正确, 永远有出错的可能</p>
<h2 id="机械唯物主义"><a href="#机械唯物主义" class="headerlink" title="机械唯物主义"></a>机械唯物主义</h2><blockquote>
<p>用物理学去解释包括人类意识在内的整个世界, 这种观点就叫「机械论」.</p>
<p>机械论就是除掉了辩证那部分的唯物主义, 也可以叫做「机械唯物主义」.</p>
</blockquote>
<p>牛顿提出的力学三大定律, 让人们开始尝试着用物理学来解释整个世界. 按照机械论的说法, 一切都不过是物质运动的结果.</p>
<p>机械论和经验主义, 理性主义都不太相同. 经验主义和理性主义关心的是真理的来源, 一个说是归纳一个说是推理. 机械论在这个问题上倾向于经验主义, 认为能观测到的东西就是真的.</p>
<h3 id="决定论"><a href="#决定论" class="headerlink" title="决定论"></a>决定论</h3><blockquote>
<p>决定论: 既然世界万物都可以用物理规律来解释, 那么每一个事件之间必然要遵循严格的因果律.</p>
<p>如果人的意识是完全由物质决定的, 那肯定也得符合物理定律.</p>
<p>那么, 整个世界该如何发展, 该走向何处, 都是由自然定律决定好了的.</p>
</blockquote>
<p>决定论是由机械论推出来的, 它可怕的地方在于, 一旦接受严格的决定论, 那就意味着人类没有自由意志了. 人生就没有意义了.</p>
<p>一切都已经决定好了, 那人类为什么还要奋斗? 而且如果一切都是已经决定好了的, 那人还要为自己的行为负责吗?</p>
<h2 id="休谟"><a href="#休谟" class="headerlink" title="休谟"></a>休谟</h2><blockquote>
<p>只相信自己感受到的, 至于这些是真是假, 我不知道.</p>
</blockquote>
<p>休谟是经验主义者, 但他认为他之前的经验主义者和理性主义者都存在根本缺陷, 那就是双方讨论的问题超过了人的经验范围.</p>
<p>他用怀疑抛掉了前人所有不可信的经验, 他找到两种切实可信的知识:</p>
<ol>
<li>不依赖于经验的知识. 比如「几何」</li>
<li>我们自己感受到的经验.</li>
</ol>
<p>休谟的理论把「哲学」和「科学」都给办掉了.</p>
<p>「科学」依靠的是「因果律」, 即:</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">1. A事件发生在前, B事件发生在后.</span><br><span class="line">2. 这个关系是必然的.</span><br></pre></td></tr></table></figure>

<p>休谟的理论则说, 我们只能观测到第一点, 知道A在前, B在后. 但没法保证第二点. 即你永远不知道第二天太阳是否会照常升起. 因果律不存在的话, 那自然也就没有归纳法, 那科学就完了.</p>
<p>「哲学」也被他给毁了, 理性主义已经被驳斥成「独断论」了, 还剩下一个「经验主义」. 经验主义吃饭的家伙就是归纳法, 这个也给整没了.</p>
<h2 id="康德"><a href="#康德" class="headerlink" title="康德"></a>康德</h2><p>康德拯救了这一切. 大器晚成的他写了一本书「纯粹理性批判」. 他看了休谟的论述后, 认为我们应该把主客观世界的关系颠倒过来. 想了解他的理论, 先要认识几个名词:</p>
<p>他认为人类永远无法认识到这个世界的真面目. 人类所感受到的这个世界, 都是通过人类心灵中某个特殊的机关加工处理过的.</p>
<p>「先天认识形式」: 负责加工的机关, 这个是每个人都一样的.<br>「自在之物」: 世界的真面目.<br>「表象」: 人类感觉到的世界</p>
<p>也就是说, 我们看到的桌子, 是世界的表象. 桌子的真面目是自在之物, 它到底是什么样子的, 我们永远无法知道. 好比如我们每个人都蓝色的有色眼镜在看待这个世界.</p>
<p>在他的哲学里, 不是心灵去感受经验, 而是心灵加工、生产了经验. 我们的先天认识形式里, 包含了十二个先天范畴用来处理自在之物, 其中一个就是因果律. 人类的意识是自在之物. 因果律只存在于先天认识形式里, 并不存在于自在之物里.</p>
<p>也就是说, 他给人的意志加了一层保护套: 先天认识形式. 这样决定论就不能去控制人的内心意志了, 所以人仍旧是自由的.</p>
<p>他把世界分成了两个部分, 一个部分完全不可知, 另一个部分则可以用理性把握. 不可知的那部分因为永远不可知, 所以对我们的生活没有什么影响. 只要我们在可把握的世界里生活, 理性就又恢复威力了.</p>
<p>归纳法可以继续使用了, 问题完美解决.</p>
<p>当然, 康德的理论也是有它的问题的, 其中一个问题就出在自在之物上. 他怎么能去讲述一个「人类不可能认识」的东西呢?</p>
<h2 id="黑格尔"><a href="#黑格尔" class="headerlink" title="黑格尔"></a>黑格尔</h2><p>康德之所以要使用自在之物的概念, 就是为了把人类理性的认识能力限制在一定范围之内. 为什么非要限制人类的认识能力? 会不会是之前所有的哲学流派对形而上学的思考全都出了问题?</p>
<p>之前的哲学家在研究形而上学的时候, 都用的是二元论的思想. 黑格尔认为我就是世界的一部分. 我不仅在观察这世界, 我也在影响这世界. 世界是不断变化的, 真理就是世界变化不止的过程, 并不是一个固定不变的答案. 黑格尔哲学观的关键在于, 他认为世界的变化不是无序的, 而是有方向的.</p>
<p>这就是<strong>辩证法</strong>.</p>
<h2 id="叔本华"><a href="#叔本华" class="headerlink" title="叔本华"></a>叔本华</h2><h3 id="悲观主义"><a href="#悲观主义" class="headerlink" title="悲观主义"></a>悲观主义</h3><p>叔本华是康德的继承者, 他不喜欢黑格尔的哲学.</p>
<p>叔本华对康德理论的改造主要就是在「自在之物」上. 他认为, 「自在之物」是可以了解的, 而且万物的自在之物是统一的, 这个「自在之物」叫做「生命意志」.</p>
<p>「生命意志」是什么东西? 简单地说, 就是求生的欲望. 比如食欲、性欲.</p>
<p>我们以为自己工作生活是根据自己理性选择的. 而叔本华认为, 真正驱动你的都是种种欲望: 生殖的欲望、享乐的欲望,等等.</p>
<p>他的理论吸引人的地方不是他的形而上学, 而是其推论: 悲观主义.</p>
<p>叔本华说生命意志是邪恶的, 是痛苦的源泉. 所以每个人都逃脱不了痛苦.</p>
<p>他认为欲望本质上是痛苦之源, 因为满足不了欲望, 人会痛苦; 满足了欲望, 人又会产生新的、更高的欲望. 就算没产生新的欲望, 人还是会感到空虚和无聊, 这也是痛苦. 所以快乐只是暂时的, 痛苦才是永恒的.</p>
<p>那么如何才能摆脱这种痛苦呢?</p>
<p>他认为是「道德」, 通过提高道德、理性和毅力去苦修、去克制我们的欲望.</p>
<p>还有一个办法是–欣赏艺术. 因为, 我们在欣赏艺术的时候, 内心是非功利的, 也就暂时脱离了生命意志的控制.</p>
<p>叔本华把康德的形而上学和佛家的禁欲观糅合在一起, 为什么要这么结合, 他没说出什么特别的道理.</p>
<h2 id="尼采"><a href="#尼采" class="headerlink" title="尼采"></a>尼采</h2><blockquote>
<p>尼采作为一个思想家, 他的作品大气磅礴, 有很强的感染力.</p>
<p>但作为一个哲学家, 他没有自己的形而上学, 观点都是断言式的.</p>
</blockquote>
<p>尼采在哲学上是站在叔本华那边的. 叔本华讲的是<strong>「生命意志」</strong>, 尼采讲的是<strong>「权力意志」</strong>.</p>
<p>这里的「权力意志」指的是要让自己变得更强大、更强壮、更富创造力的欲望. 对于弱者, 权力意志就是争取自由; 对于强者, 则表现为特立独行、勇于征服以及追求权力.</p>
<p>尼采把道德分成了两种:</p>
<ol>
<li>奴隶道德它是属于弱者的道德, 核心的内容是同情、仁慈、谦卑. 总而言之就是想尽办法限制强者的能力, 把强者和特立独行的人看做是危险人物, 要求强者给弱者分一杯羹.</li>
<li>贵族道德它是属于强者的道德, 核心内容是积极进取, 特立独行, 崇尚强大, 鄙视软弱, 追求创新, 拒绝平庸.</li>
</ol>
<p>奴隶道德和贵族道德最明显的区别在于, 奴隶道德总是在禁止, 不许做这个, 不许做那个; 而贵族道德则是在鼓励.</p>
<p>尼采并不完全反对奴隶道德, 他反对的是把奴隶道德普遍化, 把奴隶道德加于强者的身上.</p>
<h2 id="进化论"><a href="#进化论" class="headerlink" title="进化论"></a>进化论</h2><p>科学在发展, 进军了生物世界, 进化论出现了:</p>
<ol>
<li>生物的基因信息可以遗传给下一代.</li>
<li>在遗传的时候, 基因会发生不可控制的、随机的变异.</li>
<li>整个生物种群都面临着巨大的存在压力, 自然资源远远小于每一代新生物, 因此每一代新生物中的大部分都会死掉.</li>
<li>生物后天的变化是不能改变基因的.</li>
</ol>
<p>进化论有三大影响:</p>
<ol>
<li>严重打击了基督教的威信</li>
<li>进一步消除了人类的神圣性</li>
<li>解释了一些过去被认为神圣、神秘的人类天性.</li>
</ol>
<h2 id="辩证唯物主义"><a href="#辩证唯物主义" class="headerlink" title="辩证唯物主义"></a>辩证唯物主义</h2><p>辩证唯物主义认为物料不仅决定意识, 意识还能反作用于物质. 这样人类就又有了自由意志.</p>
<p>马克思的重点在于他的历史观, 一切都是用辩证的唯物主义去看待历史, 把历史事件和历史人物都放在生产关系–也就是阶级身份中去看.</p>
<h2 id="逻辑实证主义"><a href="#逻辑实证主义" class="headerlink" title="逻辑实证主义"></a>逻辑实证主义</h2><p>科学的发展日新月异, 而哲学连一些最基础的问题都没有解决. 有个流派就认为是哲学的研究方法出了问题, 他们试图改进哲学研究方法, 认为哲学必须要采用和科学一样严谨的研究方法, 立足于经验, 不容许一点独断论. 这就是「逻辑实验主义」.</p>
<p>这个学派的代表人物就是大名鼎鼎的「罗素」和他的学生「维特根斯坦」. 他们这个流派认为我们平时使用的语言有些模棱两可, 不得于大家对真理的认识, 他们想把语言变更更加严谨, 严谨得完全遵守逻辑规则, 让语言能完全准确地表达意思.</p>
<p>他们创造了一种新的语言, 用大量的符号代替词汇, 他们要用逻辑工具来一一考察所有的哲学命题, 把所有没有意义的, 不可证实的命题都剔除出去, 然而结果去让他们吓了一跳.</p>
<p>他们发现, 剔除到最后, 留下的只有类似「这花是红的」这种描述片断经验的命题, 或者是不产生新知识的, 纯粹在逻辑上成立的命题. 而大部分哲学问题, 特别是形而上学的问题, 全都是没有意义的伪问题.</p>
<p>在他们看来, 为什么哲学家们对形而上学争论了这么久都没有结果呢? 因为他们争论的根本就是一个没有意义、不可能有答案的问题. 人们没办法靠实证的方式来解决这些问题.</p>
<h2 id="实用主义"><a href="#实用主义" class="headerlink" title="实用主义"></a>实用主义</h2><blockquote>
<p>逻辑实证主义看到了科学的「严谨性」, 希望哲学也能和科学一样严谨.<br>实用主义看到了科学的「实用性」, 他们觉得也要重视哲学的实用性.</p>
</blockquote>
<p>实用主义和逻辑实证主义是一个时期的学说. 实用主义并不代表着只要观点对我们有用, 我们就能没有原则地拿来相信.</p>
<p>相对论和量子力学的发展, 让人们发现认识世界的能力是有局限的. 而且, 量子力学彻底打败了机械论和决定论.</p>
<h2 id="科学"><a href="#科学" class="headerlink" title="科学"></a>科学</h2><blockquote>
<p>既然科学是一个描述世界的工具, 那么其他的理论, 比如宗教、巫术, 它们也是描述世界的工具. 那凭什么科学就敢拿自己的标准来衡量别人, 只要不符合「科学」, 就说人家荒谬?</p>
</blockquote>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">科学就是建立在经验主义基础上的、以实用主义为原则筛选出来的理论.</span><br><span class="line"></span><br><span class="line">它完全开放, 允许质疑, 反对独断论.</span><br></pre></td></tr></table></figure>

<p>这就是我们衡量各理论的标准: 第一是经验主义, 第二是实用主义.</p>
<p>选择理论的原则是实用主义, 依据是经验主义.</p>
<h2 id="主观真理"><a href="#主观真理" class="headerlink" title="主观真理"></a>主观真理</h2><blockquote>
<p>道可道, 非常道.</p>
</blockquote>
<p>之前的哲学发展, 最大价值在于它限制了人类理性的认识能力. 超过理性认识的界限的知识, 理性不能正确地把握. 只能是个人的体验感悟, 即非理性的哲学思考, 这必然会带来主观性.</p>
<p>也就是说我们得到的只能是<strong>主观真理</strong> – 你自己说是真理就是真理.</p>
<p>这里说的「主观真理」, 仅仅指的是那些经验不可验证的问题. 在人类有能力经验的领域里, 特别是在客观经验领域, 我们还是应该坚持经合主义–它最好的代言人就是科学.</p>
<p>在主观经验领域(比如我们对一首歌的感受), 理性并不是不能描述(比如用语言来表达自己对这首音乐的感受), 只是非常吃力, 对事物原貌的歪曲程度比较大.</p>
<p>真理是主观的, 并不代表我们没有一些固定的方法去追求. 比如中国哲学中的「悟」, 就是一种追求方法. 多思考, 坐禅等方式, 最后得到的真理是主观的, 是属于你自己的, 你没办法用语言表达出来. 但追求真理的方法, 还可以部分地用理性表述出来.</p>
<h2 id="中国哲学"><a href="#中国哲学" class="headerlink" title="中国哲学"></a>中国哲学</h2><p>和西方哲学相比, 中国哲学有几个特点:</p>
<ol>
<li>中国哲学关注个人, 各学派都对个人的修养有直接的指导, 不像西方哲学有黑格尔那样轻视个人的学说.</li>
<li>中国哲学对个人的指导容易实践, 不要求实践者依赖于外物.</li>
<li>中国哲学各学派有些相近的观点. 比如大都认为宇宙万物是一体的, 目标都是追求天人合一.</li>
<li>中国哲学大都要求很长时间来修行实践, 检验难度较大.</li>
</ol>
<p>了解中国哲学应该注意几个问题:</p>
<ol>
<li>中国人有喜欢厚古薄今的传统</li>
<li>中国哲学大都重视宏观理论, 轻视具体经验.</li>
<li>古籍的应用范围要限制在客观经验不能验证或者难以有效验证的领域(比如伦理学), 在主观经验领域, 还是要靠实用主义.</li>
</ol>
]]></content>
      <categories>
        <category>日常</category>
        <category>信息</category>
      </categories>
      <tags>
        <tag>读书</tag>
        <tag>哲学</tag>
      </tags>
  </entry>
</search>
